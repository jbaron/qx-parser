{
  "className": "qx.bom.webfonts.Manager",
  "packageName": "qx.bom.webfonts",
  "name": "Manager",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 58,
        "column": 0,
        "index": 1505
      },
      "end": {
        "line": 652,
        "column": 3,
        "index": 20233
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Manages font-face definitions, making sure that each rule is only applied\n once. It supports adding fonts of the same family but with different style\n and weight. For instance, the following declaration uses 4 different source\n files and combine them in a single font family.\n </p>\n<pre class='javascript'>\n   sources: [\n     {\n       family: \"Sansation\",\n       source: [\n         \"fonts/Sansation-Regular.ttf\"\n       ]\n     },\n     {\n       family: \"Sansation\",\n       fontWeight: \"bold\",\n       source: [\n         \"fonts/Sansation-Bold.ttf\",\n       ]\n     },\n     {\n       family: \"Sansation\",\n       fontStyle: \"italic\",\n       source: [\n         \"fonts/Sansation-Italic.ttf\",\n       ]\n     },\n     {\n       family: \"Sansation\",\n       fontWeight: \"bold\",\n       fontStyle: \"italic\",\n       source: [\n         \"fonts/Sansation-BoldItalic.ttf\",\n       ]\n     }\n   ]\n </pre>\n<p>This class does not need to be disposed, except when you want to abort the loading\n and validation process.</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": true,
  "construct": {
    "location": {
      "start": {
        "line": 69,
        "column": 2,
        "index": 1789
      },
      "end": {
        "line": 75,
        "column": 3,
        "index": 1959
      }
    },
    "jsdoc": {}
  },
  "statics": {
    "FONT_FORMATS": {
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2326
        },
        "end": {
          "line": 88,
          "column": 56,
          "index": 2378
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>List of known font definition formats (i.e. file extensions). Used to\n identify the type of each font file configured for a web font.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "VALIDATION_TIMEOUT": {
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 2480
        },
        "end": {
          "line": 93,
          "column": 28,
          "index": 2504
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Timeout (in ms) to wait before deciding that a web font was not loaded.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__createdStyles": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 2712
        },
        "end": {
          "line": 103,
          "column": 25,
          "index": 2733
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__styleSheet": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 2739
        },
        "end": {
          "line": 104,
          "column": 22,
          "index": 2757
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__validators": {
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 2763
        },
        "end": {
          "line": 105,
          "column": 22,
          "index": 2781
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__preferredFormats": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 2787
        },
        "end": {
          "line": 106,
          "column": 28,
          "index": 2811
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__queue": {
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 2817
        },
        "end": {
          "line": 107,
          "column": 17,
          "index": 2830
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__queueInterval": {
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 2836
        },
        "end": {
          "line": 108,
          "column": 25,
          "index": 2857
        }
      },
      "type": "variable",
      "access": "private"
    },
    "require": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3906
        },
        "end": {
          "line": 185,
          "column": 5,
          "index": 5520
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the necessary font-face rule for a web font to the document. Also\n creates a web font Validator ({@link qx.bom.webfonts.Validator}) that\n checks if the webFont was applied correctly.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} Name of the web font",
            "paramName": "familyName",
            "description": " Name of the web font",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sourcesList {Object} List of source URLs along with their style\n (e.g. fontStyle: \"italic\") and weight (e.g. fontWeight: \"bold\").\n For maximum compatibility, this should include EOT, WOFF and TTF versions\n of the font.",
            "paramName": "sourcesList",
            "description": " List of source URLs along with their style\n (e.g. fontStyle: \"italic\") and weight (e.g. fontWeight: \"bold\").\n For maximum compatibility, this should include EOT, WOFF and TTF versions\n of the font.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "callback {Function?} Optional event listener callback that will be\n executed once the validator has determined whether the webFont was\n applied correctly.\n See {@link qx.bom.webfonts.Validator#changeStatus}",
            "paramName": "callback",
            "description": " Optional event listener callback that will be\n executed once the validator has determined whether the webFont was\n applied correctly.\n See {@link qx.bom.webfonts.Validator#changeStatus}",
            "optional": true,
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} Optional context for the callback function",
            "paramName": "context",
            "description": " Optional context for the callback function",
            "optional": true,
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 5907
        },
        "end": {
          "line": 218,
          "column": 5,
          "index": 6601
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a font's font-face definition from the style sheet. This means\n the font will no longer be available and any elements using it will\n fall back to the their regular font-families.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} font-family name",
            "paramName": "familyName",
            "description": " font-family name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} the font-weight.",
            "paramName": "fontWeight",
            "description": " the font-weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} the font-style.",
            "paramName": "fontStyle",
            "description": " the font-style.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPreferredFormats": {
      "location": {
        "start": {
          "line": 228,
          "column": 4,
          "index": 6982
        },
        "end": {
          "line": 273,
          "column": 5,
          "index": 8532
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the preferred font format(s) for the currently used browser. Some\n browsers support multiple formats, e.g. WOFF and TTF or WOFF and EOT. In\n those cases, WOFF is considered the preferred format.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} List of supported font formats ordered by preference\n or empty Array if none could be determined",
            "type": "String[]",
            "description": " List of supported font formats ordered by preference\n or empty Array if none could be determined"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeStyleSheet": {
      "location": {
        "start": {
          "line": 281,
          "column": 4,
          "index": 8814
        },
        "end": {
          "line": 287,
          "column": 5,
          "index": 9002
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the styleSheet element used for all web font definitions from the\n document. This means all web fonts declared by the manager will no longer\n be available and elements using them will fall back to their regular\n font-families</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__createFontLookupKey": {
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 9469
        },
        "end": {
          "line": 310,
          "column": 5,
          "index": 9719
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a lookup key to index the created fonts.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} font-family name",
            "paramName": "familyName",
            "description": " font-family name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} the font-weight.",
            "paramName": "fontWeight",
            "description": " the font-weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} the font-style.",
            "paramName": "fontStyle",
            "description": " the font-style.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string} the font lookup key",
            "type": "string",
            "description": " the font lookup key"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__require": {
      "location": {
        "start": {
          "line": 330,
          "column": 4,
          "index": 10717
        },
        "end": {
          "line": 406,
          "column": 5,
          "index": 12583
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Does the actual work of adding stylesheet rules and triggering font\n validation</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} Name of the web font",
            "paramName": "familyName",
            "description": " Name of the web font",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sources {String[]} List of source URLs. For maximum compatibility,\n this should include EOT, WOFF and TTF versions of the font.",
            "paramName": "sources",
            "description": " List of source URLs. For maximum compatibility,\n this should include EOT, WOFF and TTF versions of the font.",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} the web font should be registered using a\n fontWeight font weight.",
            "paramName": "fontWeight",
            "description": " the web font should be registered using a\n fontWeight font weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} the web font should be registered using an\n fontStyle font style.",
            "paramName": "fontStyle",
            "description": " the web font should be registered using an\n fontStyle font style.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "comparisonString {String} String to check whether the font has loaded or not",
            "paramName": "comparisonString",
            "description": " String to check whether the font has loaded or not",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "version {String?} Optional version that is appended to the font URL to be able to override caching",
            "paramName": "version",
            "description": " Optional version that is appended to the font URL to be able to override caching",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "callback {Function?} Optional event listener callback that will be\n executed once the validator has determined whether the webFont was\n applied correctly.",
            "paramName": "callback",
            "description": " Optional event listener callback that will be\n executed once the validator has determined whether the webFont was\n applied correctly.",
            "optional": true,
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} Optional context for the callback function",
            "paramName": "context",
            "description": " Optional context for the callback function",
            "optional": true,
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__flushQueue": {
      "location": {
        "start": {
          "line": 411,
          "column": 4,
          "index": 12650
        },
        "end": {
          "line": 418,
          "column": 5,
          "index": 12850
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Processes the next item in the queue</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onFontChangeStatus": {
      "location": {
        "start": {
          "line": 425,
          "column": 4,
          "index": 13031
        },
        "end": {
          "line": 436,
          "column": 5,
          "index": 13287
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the font-face declaration if a font could not be validated</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} qx.bom.webfonts.Validator#changeStatus",
            "paramName": "ev",
            "description": " qx.bom.webfonts.Validator#changeStatus",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getSourcesMap": {
      "location": {
        "start": {
          "line": 446,
          "column": 4,
          "index": 13619
        },
        "end": {
          "line": 458,
          "column": 5,
          "index": 14030
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Uses a naive regExp match to determine the format of each defined source\n file for a webFont. Returns a map with the format names as keys and the\n corresponding source URLs as values.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sources {String[]} Array of source URLs",
            "paramName": "sources",
            "description": " Array of source URLs",
            "type": "String[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of formats and URLs",
            "type": "Map",
            "description": " Map of formats and URLs"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getRule": {
      "location": {
        "start": {
          "line": 472,
          "column": 4,
          "index": 14575
        },
        "end": {
          "line": 497,
          "column": 5,
          "index": 15386
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assembles the body of a font-face rule for a single webFont.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} Font-family name",
            "paramName": "familyName",
            "description": " Font-family name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} the web font should be registered using a\n fontWeight font weight.",
            "paramName": "fontWeight",
            "description": " the web font should be registered using a\n fontWeight font weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} the web font should be registered using an\n fontStyle font style.",
            "paramName": "fontStyle",
            "description": " the web font should be registered using an\n fontStyle font style.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sourcesMap {Map} Map of font formats and sources",
            "paramName": "sourcesMap",
            "description": " Map of font formats and sources",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "version {String?} Optional version to be appended to the URL",
            "paramName": "version",
            "description": " Optional version to be appended to the URL",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The computed CSS rule",
            "type": "String",
            "description": " The computed CSS rule"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getSourceForFormat": {
      "location": {
        "start": {
          "line": 507,
          "column": 4,
          "index": 15732
        },
        "end": {
          "line": 534,
          "column": 5,
          "index": 16427
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the full src value for a given font URL depending on the type</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "format {String} The font format, one of eot, woff2, woff, ttf, svg",
            "paramName": "format",
            "description": " The font format, one of eot, woff2, woff, ttf, svg",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "url {String} The font file's URL",
            "paramName": "url",
            "description": " The font file's URL",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "version {String?} Optional version to be appended to the URL",
            "paramName": "version",
            "description": " Optional version to be appended to the URL",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The src directive",
            "type": "String",
            "description": " The src directive"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__addRule": {
      "location": {
        "start": {
          "line": 541,
          "column": 4,
          "index": 16555
        },
        "end": {
          "line": 557,
          "column": 5,
          "index": 17061
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a font-face rule to the document</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rule {String} The body of the CSS rule",
            "paramName": "rule",
            "description": " The body of the CSS rule",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeRule": {
      "location": {
        "start": {
          "line": 567,
          "column": 4,
          "index": 17353
        },
        "end": {
          "line": 617,
          "column": 5,
          "index": 19216
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the font-face declaration for the given font-family from the\n stylesheet</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} The font-family name",
            "paramName": "familyName",
            "description": " The font-family name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} fontWeight font-weight.",
            "paramName": "fontWeight",
            "description": " fontWeight font-weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} fontStyle font-style.",
            "paramName": "fontStyle",
            "description": " fontStyle font-style.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__fixCssText": {
      "location": {
        "start": {
          "line": 627,
          "column": 4,
          "index": 19542
        },
        "end": {
          "line": 631,
          "column": 5,
          "index": 19695
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>IE 6 and 7 omit the trailing quote after the format name when\n querying cssText. This needs to be fixed before cssText is replaced\n or all rules will be invalid and no web fonts will work any more.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cssText {String} CSS text",
            "paramName": "cssText",
            "description": " CSS text",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Fixed CSS text",
            "type": "String",
            "description": " Fixed CSS text"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 640,
        "column": 2,
        "index": 19890
      },
      "end": {
        "line": 651,
        "column": 3,
        "index": 20229
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}
{
  "className": "qx.bom.webfonts.Validator",
  "packageName": "qx.bom.webfonts",
  "name": "Validator",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0,
        "index": 630
      },
      "end": {
        "line": 415,
        "column": 3,
        "index": 11764
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Checks whether a given font is available on the document and fires events\n accordingly.\n This class does not need to be disposed, unless you want to abort the validation\n early</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 39,
        "column": 2,
        "index": 1256
      },
      "end": {
        "line": 56,
        "column": 3,
        "index": 1679
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "fontFamily {String} The name of the font to be verified",
          "paramName": "fontFamily",
          "description": " The name of the font to be verified",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "comparisonString {String?} String to be used to detect whether a font was loaded or not",
          "paramName": "comparisonString",
          "description": " String to be used to detect whether a font was loaded or not",
          "optional": true,
          "type": "String"
        },
        {
          "name": "@param",
          "body": "fontWeight {String?} the weight of the font to be verified",
          "paramName": "fontWeight",
          "description": " the weight of the font to be verified",
          "optional": true,
          "type": "String"
        },
        {
          "name": "@param",
          "body": "fontStyle {String?} the style of the font to be verified\n whether the font has loaded properly",
          "paramName": "fontStyle",
          "description": " the style of the font to be verified\n whether the font has loaded properly",
          "optional": true,
          "type": "String"
        }
      ]
    }
  },
  "statics": {
    "COMPARISON_FONTS": {
      "location": {
        "start": {
          "line": 69,
          "column": 4,
          "index": 2042
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 2170
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets of serif and sans-serif fonts to be used for size comparisons.\n At least one of these fonts should be present on any system.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "HELPER_CSS": {
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2274
        },
        "end": {
          "line": 89,
          "column": 5,
          "index": 2557
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map of common CSS attributes to be used for all  size comparison elements</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "COMPARISON_STRING": {
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2864
        },
        "end": {
          "line": 97,
          "column": 29,
          "index": 2889
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The string to be used in the size comparison elements. This is the default string\n which is used for the {@link #COMPARISON_FONTS} and the font to be validated. It\n can be overridden for the font to be validated using the {@link #comparisonString}\n property.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "__defaultSizes": {
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2895
        },
        "end": {
          "line": 98,
          "column": 24,
          "index": 2915
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultHelpers": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2921
        },
        "end": {
          "line": 99,
          "column": 26,
          "index": 2943
        }
      },
      "type": "variable",
      "access": "private"
    },
    "removeDefaultHelperElements": {
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 3062
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 3375
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the two common helper elements used for all size comparisons from\n the DOM</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "fontFamily": {
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3656
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3747
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The font-family this validator should check</p>"
          }
        ]
      },
      "name": "fontFamily",
      "propertyType": "new",
      "apply": "_applyFontFamily",
      "nullable": true,
      "allowNull": true
    },
    "fontWeight": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 3790
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 3886
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The font weight to check</p>"
          }
        ]
      },
      "name": "fontWeight",
      "propertyType": "new",
      "apply": "_applyFontWeight",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "fontStyle": {
      "location": {
        "start": {
          "line": 140,
          "column": 4,
          "index": 3928
        },
        "end": {
          "line": 144,
          "column": 5,
          "index": 4022
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The font style to check</p>"
          }
        ]
      },
      "name": "fontStyle",
      "propertyType": "new",
      "apply": "_applyFontStyle",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "comparisonString": {
      "location": {
        "start": {
          "line": 149,
          "column": 4,
          "index": 4120
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 4184
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Comparison string used to check whether the font has loaded or not.</p>"
          }
        ]
      },
      "name": "comparisonString",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true
    },
    "timeout": {
      "location": {
        "start": {
          "line": 158,
          "column": 4,
          "index": 4323
        },
        "end": {
          "line": 161,
          "column": 5,
          "index": 4380
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Time in milliseconds from the beginning of the check until it is assumed\n that a font is not available</p>"
          }
        ]
      },
      "name": "timeout",
      "propertyType": "new",
      "init": 5000,
      "check": "Integer",
      "defaultValue": 5000
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "events": {
    "changeStatus": {
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 4773
        },
        "end": {
          "line": 176,
          "column": 38,
          "index": 4807
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the status of a web font has been determined. The event data\n is a map with the keys \"family\" (the font-family name) and \"valid\"\n (Boolean).</p>"
          }
        ]
      },
      "name": "changeStatus",
      "type": "qx.event.type.Data"
    }
  },
  "members": {
    "__requestedHelpers": {
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 5015
        },
        "end": {
          "line": 186,
          "column": 28,
          "index": 5039
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__checkTimer": {
      "location": {
        "start": {
          "line": 187,
          "column": 4,
          "index": 5045
        },
        "end": {
          "line": 187,
          "column": 22,
          "index": 5063
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__checkStarted": {
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 5069
        },
        "end": {
          "line": 188,
          "column": 24,
          "index": 5089
        }
      },
      "type": "variable",
      "access": "private"
    },
    "validate": {
      "location": {
        "start": {
          "line": 199,
          "column": 4,
          "index": 5330
        },
        "end": {
          "line": 216,
          "column": 5,
          "index": 5832
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validates the font</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_reset": {
      "location": {
        "start": {
          "line": 227,
          "column": 4,
          "index": 6098
        },
        "end": {
          "line": 235,
          "column": 5,
          "index": 6356
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the helper elements from the DOM</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isFontValid": {
      "location": {
        "start": {
          "line": 245,
          "column": 4,
          "index": 6658
        },
        "end": {
          "line": 276,
          "column": 5,
          "index": 7612
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the font is available by comparing the widths of the elements\n using the generic fonts to the widths of the elements using the font to\n be validated</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether or not the font caused the elements to differ\n in size",
            "type": "Boolean",
            "description": " Whether or not the font caused the elements to differ\n in size"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getRequestedHelpers": {
      "location": {
        "start": {
          "line": 284,
          "column": 4,
          "index": 7841
        },
        "end": {
          "line": 297,
          "column": 5,
          "index": 8290
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the two helper elements styled with the font to be checked</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with the keys <pre>sans</pre> and <pre>serif</pre>\n and the created span elements as values",
            "type": "Map",
            "description": " A map with the keys <pre>sans</pre> and <pre>serif</pre>\n and the created span elements as values"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getHelperElement": {
      "location": {
        "start": {
          "line": 308,
          "column": 4,
          "index": 8771
        },
        "end": {
          "line": 330,
          "column": 5,
          "index": 9559
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a span element with the comparison text (either {@link #COMPARISON<em>STRING} or\n {@link #comparisonString}) and styled with the default CSS ({@link #HELPER</em>CSS}) plus\n the given font-family value and appends it to the DOM</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fontFamily {String} font-family string",
            "paramName": "fontFamily",
            "description": " font-family string",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "comparisonString {String?} String to be used to detect whether a font was loaded or not",
            "paramName": "comparisonString",
            "description": " String to be used to detect whether a font was loaded or not",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the created DOM element",
            "type": "Element",
            "description": " the created DOM element"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyFontFamily": {
      "location": {
        "start": {
          "line": 333,
          "column": 4,
          "index": 9588
        },
        "end": {
          "line": 337,
          "column": 5,
          "index": 9682
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "fontFamily"
      ]
    },
    "_applyFontWeight": {
      "location": {
        "start": {
          "line": 340,
          "column": 4,
          "index": 9711
        },
        "end": {
          "line": 344,
          "column": 5,
          "index": 9805
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "fontWeight"
      ]
    },
    "_applyFontStyle": {
      "location": {
        "start": {
          "line": 347,
          "column": 4,
          "index": 9834
        },
        "end": {
          "line": 351,
          "column": 5,
          "index": 9927
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "fontStyle"
      ]
    },
    "__init": {
      "location": {
        "start": {
          "line": 362,
          "column": 4,
          "index": 10208
        },
        "end": {
          "line": 375,
          "column": 5,
          "index": 10681
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the default helper elements and gets their widths</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onTimerInterval": {
      "location": {
        "start": {
          "line": 381,
          "column": 4,
          "index": 10817
        },
        "end": {
          "line": 400,
          "column": 5,
          "index": 11377
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Triggers helper element size comparison and fires a ({@link #changeStatus})\n event with the result.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getFontFamily": {
      "type": "function",
      "name": "getFontFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>fontFamily</code>.\n\nFor further details take a look at the property definition: {@link #fontFamily}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for fontFamily"
          }
        ]
      }
    },
    "setFontFamily": {
      "type": "function",
      "name": "setFontFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>fontFamily</code>.\n\nFor further details take a look at the property definition: {@link #fontFamily}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for fontFamily"
          }
        ]
      }
    },
    "resetFontFamily": {
      "type": "function",
      "name": "resetFontFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>fontFamily</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #fontFamily}."
          }
        ]
      }
    },
    "getFontWeight": {
      "type": "function",
      "name": "getFontWeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>fontWeight</code>.\n\nFor further details take a look at the property definition: {@link #fontWeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for fontWeight"
          }
        ]
      }
    },
    "setFontWeight": {
      "type": "function",
      "name": "setFontWeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>fontWeight</code>.\n\nFor further details take a look at the property definition: {@link #fontWeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for fontWeight"
          }
        ]
      }
    },
    "resetFontWeight": {
      "type": "function",
      "name": "resetFontWeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>fontWeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #fontWeight}."
          }
        ]
      }
    },
    "getFontStyle": {
      "type": "function",
      "name": "getFontStyle",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>fontStyle</code>.\n\nFor further details take a look at the property definition: {@link #fontStyle}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for fontStyle"
          }
        ]
      }
    },
    "setFontStyle": {
      "type": "function",
      "name": "setFontStyle",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>fontStyle</code>.\n\nFor further details take a look at the property definition: {@link #fontStyle}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for fontStyle"
          }
        ]
      }
    },
    "resetFontStyle": {
      "type": "function",
      "name": "resetFontStyle",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>fontStyle</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #fontStyle}."
          }
        ]
      }
    },
    "getComparisonString": {
      "type": "function",
      "name": "getComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>comparisonString</code>.\n\nFor further details take a look at the property definition: {@link #comparisonString}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for comparisonString"
          }
        ]
      }
    },
    "setComparisonString": {
      "type": "function",
      "name": "setComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>comparisonString</code>.\n\nFor further details take a look at the property definition: {@link #comparisonString}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for comparisonString"
          }
        ]
      }
    },
    "resetComparisonString": {
      "type": "function",
      "name": "resetComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>comparisonString</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #comparisonString}."
          }
        ]
      }
    },
    "getTimeout": {
      "type": "function",
      "name": "getTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for timeout"
          }
        ]
      }
    },
    "setTimeout": {
      "type": "function",
      "name": "setTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for timeout"
          }
        ]
      }
    },
    "resetTimeout": {
      "type": "function",
      "name": "resetTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>timeout</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 409,
        "column": 2,
        "index": 11573
      },
      "end": {
        "line": 414,
        "column": 3,
        "index": 11760
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}
{
  "className": "qx.bom.Font",
  "packageName": "qx.bom",
  "name": "Font",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 26,
        "column": 0,
        "index": 680
      },
      "end": {
        "line": 366,
        "column": 3,
        "index": 9150
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>A wrapper for CSS font styles. Fond objects can be applied to instances\n of {@link qx.html.Element}.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 39,
        "column": 2,
        "index": 1059
      },
      "end": {
        "line": 61,
        "column": 3,
        "index": 1478
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "size {String?} The font size (Unit: pixel)",
          "paramName": "size",
          "description": " The font size (Unit: pixel)",
          "optional": true,
          "type": "String"
        },
        {
          "name": "@param",
          "body": "family {String[]?} A sorted list of font families",
          "paramName": "family",
          "description": " A sorted list of font families",
          "optional": true,
          "type": "String[]"
        }
      ]
    }
  },
  "statics": {
    "fromString": {
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 1934
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 2758
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a typical CSS font definition string to an font object\n Example string: <code>bold italic 20px Arial</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the CSS string",
            "paramName": "str",
            "description": " the CSS string",
            "type": "qx.bom.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.Font} the created instance",
            "type": "qx.bom.Font",
            "description": " the created instance"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fromConfig": {
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 2950
        },
        "end": {
          "line": 128,
          "column": 5,
          "index": 3055
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a map property definition into a font object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "config {Map} map of property values",
            "paramName": "config",
            "description": " map of property values",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.Font} the created instance",
            "type": "qx.bom.Font",
            "description": " the created instance"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__defaultStyles": {
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3112
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 3333
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Default (empty) CSS styles"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "getDefaultStyles": {
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 3539
        },
        "end": {
          "line": 153,
          "column": 5,
          "index": 3600
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a map of all properties in empty state.\n This is useful for resetting previously configured\n font styles.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Default styles",
            "type": "Map",
            "description": " Default styles"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "size": {
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 3853
        },
        "end": {
          "line": 168,
          "column": 5,
          "index": 3938
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The font size (Unit: pixel)</p>"
          }
        ]
      },
      "name": "size",
      "propertyType": "new",
      "apply": "_applySize",
      "nullable": true,
      "allowNull": true,
      "check": "Integer"
    },
    "lineHeight": {
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 4089
        },
        "end": {
          "line": 178,
          "column": 5,
          "index": 4185
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The line height as scaling factor of the default line height. A value\n of 1 corresponds to the default line height</p>"
          }
        ]
      },
      "name": "lineHeight",
      "propertyType": "new",
      "apply": "_applyLineHeight",
      "nullable": true,
      "allowNull": true,
      "check": "Number"
    },
    "comparisonString": {
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 4459
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 4546
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Characters that are used to test if the font has loaded properly. These\n default to \"WEei\" in <code>qx.bom.webfont.Validator</code> and can be overridden\n for certain cases like icon fonts that do not provide the predefined\n characters.</p>"
          }
        ]
      },
      "name": "comparisonString",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "version": {
      "location": {
        "start": {
          "line": 203,
          "column": 4,
          "index": 5105
        },
        "end": {
          "line": 212,
          "column": 5,
          "index": 5318
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Version identifier that is appended to the URL to be loaded. Fonts\n that are defined thru themes may be managed by the resource manager.\n In this case updated fonts persist due to aggressive fontface caching\n of some browsers. To get around this, set the <code>version</code> property to\n the version of your font. It will be appended to the CSS URL and forces\n the browser to re-validate.\n The version needs to be URL friendly, so only characters, numbers,\n dash and dots are allowed here.</p>"
          }
        ]
      },
      "name": "version",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "[[ ObjectMethod Function ]]"
    },
    "family": {
      "location": {
        "start": {
          "line": 215,
          "column": 4,
          "index": 5367
        },
        "end": {
          "line": 219,
          "column": 5,
          "index": 5454
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A sorted list of font families</p>"
          }
        ]
      },
      "name": "family",
      "propertyType": "new",
      "apply": "_applyFamily",
      "nullable": true,
      "allowNull": true,
      "check": "Array"
    },
    "bold": {
      "location": {
        "start": {
          "line": 222,
          "column": 4,
          "index": 5497
        },
        "end": {
          "line": 226,
          "column": 5,
          "index": 5582
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the font is bold</p>"
          }
        ]
      },
      "name": "bold",
      "propertyType": "new",
      "apply": "_applyBold",
      "nullable": true,
      "allowNull": true,
      "check": "Boolean"
    },
    "italic": {
      "location": {
        "start": {
          "line": 229,
          "column": 4,
          "index": 5627
        },
        "end": {
          "line": 233,
          "column": 5,
          "index": 5716
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the font is italic</p>"
          }
        ]
      },
      "name": "italic",
      "propertyType": "new",
      "apply": "_applyItalic",
      "nullable": true,
      "allowNull": true,
      "check": "Boolean"
    },
    "decoration": {
      "location": {
        "start": {
          "line": 236,
          "column": 4,
          "index": 5768
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 5897
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The text decoration for this font</p>"
          }
        ]
      },
      "name": "decoration",
      "propertyType": "new",
      "apply": "_applyDecoration",
      "nullable": true,
      "allowNull": true,
      "possibleValues": [
        "underline",
        "line-through",
        "overline"
      ]
    },
    "color": {
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 5944
        },
        "end": {
          "line": 247,
          "column": 5,
          "index": 6029
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The text color for this font</p>"
          }
        ]
      },
      "name": "color",
      "propertyType": "new",
      "apply": "_applyColor",
      "nullable": true,
      "allowNull": true,
      "check": "Color"
    },
    "textShadow": {
      "location": {
        "start": {
          "line": 250,
          "column": 4,
          "index": 6077
        },
        "end": {
          "line": 254,
          "column": 5,
          "index": 6173
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The text shadow for this font</p>"
          }
        ]
      },
      "name": "textShadow",
      "propertyType": "new",
      "apply": "_applyTextShadow",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "weight": {
      "location": {
        "start": {
          "line": 257,
          "column": 4,
          "index": 6300
        },
        "end": {
          "line": 261,
          "column": 5,
          "index": 6388
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The weight property of the font as opposed to just setting it to 'bold' by setting the bold property to true</p>"
          }
        ]
      },
      "name": "weight",
      "propertyType": "new",
      "apply": "_applyWeight",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "letterSpacing": {
      "location": {
        "start": {
          "line": 264,
          "column": 4,
          "index": 6439
        },
        "end": {
          "line": 268,
          "column": 5,
          "index": 6542
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The Letter Spacing (Unit: pixel)</p>"
          }
        ]
      },
      "name": "letterSpacing",
      "propertyType": "new",
      "apply": "_applyLetterSpacing",
      "nullable": true,
      "allowNull": true,
      "check": "Integer"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__lookupMap": {
      "location": {
        "start": {
          "line": 278,
          "column": 4,
          "index": 6750
        },
        "end": {
          "line": 278,
          "column": 21,
          "index": 6767
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_applySize": {
      "location": {
        "start": {
          "line": 281,
          "column": 4,
          "index": 6796
        },
        "end": {
          "line": 283,
          "column": 5,
          "index": 6898
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "size"
      ]
    },
    "_applyLineHeight": {
      "location": {
        "start": {
          "line": 285,
          "column": 4,
          "index": 6905
        },
        "end": {
          "line": 287,
          "column": 5,
          "index": 7008
        }
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "lineHeight"
      ]
    },
    "_applyFamily": {
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 7037
        },
        "end": {
          "line": 311,
          "column": 5,
          "index": 7720
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "family"
      ]
    },
    "_applyBold": {
      "location": {
        "start": {
          "line": 314,
          "column": 4,
          "index": 7749
        },
        "end": {
          "line": 317,
          "column": 5,
          "index": 7873
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "bold"
      ]
    },
    "_applyItalic": {
      "location": {
        "start": {
          "line": 320,
          "column": 4,
          "index": 7902
        },
        "end": {
          "line": 323,
          "column": 5,
          "index": 8029
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "italic"
      ]
    },
    "_applyDecoration": {
      "location": {
        "start": {
          "line": 326,
          "column": 4,
          "index": 8058
        },
        "end": {
          "line": 328,
          "column": 5,
          "index": 8164
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "decoration"
      ]
    },
    "_applyColor": {
      "location": {
        "start": {
          "line": 331,
          "column": 4,
          "index": 8193
        },
        "end": {
          "line": 337,
          "column": 5,
          "index": 8384
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "color"
      ]
    },
    "_applyWeight": {
      "location": {
        "start": {
          "line": 340,
          "column": 4,
          "index": 8413
        },
        "end": {
          "line": 342,
          "column": 5,
          "index": 8488
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "weight"
      ]
    },
    "_applyTextShadow": {
      "location": {
        "start": {
          "line": 345,
          "column": 4,
          "index": 8517
        },
        "end": {
          "line": 347,
          "column": 5,
          "index": 8619
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "textShadow"
      ]
    },
    "_applyLetterSpacing": {
      "location": {
        "start": {
          "line": 350,
          "column": 4,
          "index": 8648
        },
        "end": {
          "line": 352,
          "column": 5,
          "index": 8764
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "letterSpacing"
      ]
    },
    "getStyles": {
      "location": {
        "start": {
          "line": 362,
          "column": 4,
          "index": 9092
        },
        "end": {
          "line": 364,
          "column": 5,
          "index": 9142
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a map of all CSS styles, which will be applied to the widget. Only\n the styles which are set are returned.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map containing the current styles. The keys are property\n names which can directly be used with the <code>set</code> method of each\n widget.",
            "type": "Map",
            "description": " Map containing the current styles. The keys are property\n names which can directly be used with the <code>set</code> method of each\n widget."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getSize": {
      "type": "function",
      "name": "getSize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>size</code>.\n\nFor further details take a look at the property definition: {@link #size}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for size"
          }
        ]
      }
    },
    "setSize": {
      "type": "function",
      "name": "setSize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>size</code>.\n\nFor further details take a look at the property definition: {@link #size}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for size"
          }
        ]
      }
    },
    "resetSize": {
      "type": "function",
      "name": "resetSize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>size</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #size}."
          }
        ]
      }
    },
    "getLineHeight": {
      "type": "function",
      "name": "getLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>lineHeight</code>.\n\nFor further details take a look at the property definition: {@link #lineHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for lineHeight"
          }
        ]
      }
    },
    "setLineHeight": {
      "type": "function",
      "name": "setLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>lineHeight</code>.\n\nFor further details take a look at the property definition: {@link #lineHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for lineHeight"
          }
        ]
      }
    },
    "resetLineHeight": {
      "type": "function",
      "name": "resetLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>lineHeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #lineHeight}."
          }
        ]
      }
    },
    "getComparisonString": {
      "type": "function",
      "name": "getComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>comparisonString</code>.\n\nFor further details take a look at the property definition: {@link #comparisonString}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for comparisonString"
          }
        ]
      }
    },
    "setComparisonString": {
      "type": "function",
      "name": "setComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>comparisonString</code>.\n\nFor further details take a look at the property definition: {@link #comparisonString}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for comparisonString"
          }
        ]
      }
    },
    "resetComparisonString": {
      "type": "function",
      "name": "resetComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>comparisonString</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #comparisonString}."
          }
        ]
      }
    },
    "getVersion": {
      "type": "function",
      "name": "getVersion",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>version</code>.\n\nFor further details take a look at the property definition: {@link #version}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for version"
          }
        ]
      }
    },
    "setVersion": {
      "type": "function",
      "name": "setVersion",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>version</code>.\n\nFor further details take a look at the property definition: {@link #version}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for version"
          }
        ]
      }
    },
    "resetVersion": {
      "type": "function",
      "name": "resetVersion",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>version</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #version}."
          }
        ]
      }
    },
    "getFamily": {
      "type": "function",
      "name": "getFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>family</code>.\n\nFor further details take a look at the property definition: {@link #family}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Array",
            "desc": "Returns the value for family"
          }
        ]
      }
    },
    "setFamily": {
      "type": "function",
      "name": "setFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>family</code>.\n\nFor further details take a look at the property definition: {@link #family}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Array",
            "paramName": "value",
            "desc": "Value for family"
          }
        ]
      }
    },
    "resetFamily": {
      "type": "function",
      "name": "resetFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>family</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #family}."
          }
        ]
      }
    },
    "getBold": {
      "type": "function",
      "name": "getBold",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>bold</code>.\n\nFor further details take a look at the property definition: {@link #bold}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for bold"
          }
        ]
      }
    },
    "isBold": {
      "type": "function",
      "name": "isBold",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>bold</code>.\n\nFor further details take a look at the property definition: {@link #bold}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for bold"
          }
        ]
      }
    },
    "setBold": {
      "type": "function",
      "name": "setBold",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>bold</code>.\n\nFor further details take a look at the property definition: {@link #bold}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for bold"
          }
        ]
      }
    },
    "resetBold": {
      "type": "function",
      "name": "resetBold",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>bold</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #bold}."
          }
        ]
      }
    },
    "getItalic": {
      "type": "function",
      "name": "getItalic",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>italic</code>.\n\nFor further details take a look at the property definition: {@link #italic}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for italic"
          }
        ]
      }
    },
    "isItalic": {
      "type": "function",
      "name": "isItalic",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>italic</code>.\n\nFor further details take a look at the property definition: {@link #italic}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for italic"
          }
        ]
      }
    },
    "setItalic": {
      "type": "function",
      "name": "setItalic",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>italic</code>.\n\nFor further details take a look at the property definition: {@link #italic}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for italic"
          }
        ]
      }
    },
    "resetItalic": {
      "type": "function",
      "name": "resetItalic",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>italic</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #italic}."
          }
        ]
      }
    },
    "getDecoration": {
      "type": "function",
      "name": "getDecoration",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>decoration</code>.\n\nFor further details take a look at the property definition: {@link #decoration}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for decoration"
          }
        ]
      }
    },
    "setDecoration": {
      "type": "function",
      "name": "setDecoration",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>decoration</code>.\n\nFor further details take a look at the property definition: {@link #decoration}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for decoration"
          }
        ]
      }
    },
    "resetDecoration": {
      "type": "function",
      "name": "resetDecoration",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>decoration</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #decoration}."
          }
        ]
      }
    },
    "getColor": {
      "type": "function",
      "name": "getColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>color</code>.\n\nFor further details take a look at the property definition: {@link #color}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for color"
          }
        ]
      }
    },
    "setColor": {
      "type": "function",
      "name": "setColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>color</code>.\n\nFor further details take a look at the property definition: {@link #color}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for color"
          }
        ]
      }
    },
    "resetColor": {
      "type": "function",
      "name": "resetColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>color</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #color}."
          }
        ]
      }
    },
    "getTextShadow": {
      "type": "function",
      "name": "getTextShadow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>textShadow</code>.\n\nFor further details take a look at the property definition: {@link #textShadow}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for textShadow"
          }
        ]
      }
    },
    "setTextShadow": {
      "type": "function",
      "name": "setTextShadow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>textShadow</code>.\n\nFor further details take a look at the property definition: {@link #textShadow}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for textShadow"
          }
        ]
      }
    },
    "resetTextShadow": {
      "type": "function",
      "name": "resetTextShadow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>textShadow</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #textShadow}."
          }
        ]
      }
    },
    "getWeight": {
      "type": "function",
      "name": "getWeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>weight</code>.\n\nFor further details take a look at the property definition: {@link #weight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for weight"
          }
        ]
      }
    },
    "setWeight": {
      "type": "function",
      "name": "setWeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>weight</code>.\n\nFor further details take a look at the property definition: {@link #weight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for weight"
          }
        ]
      }
    },
    "resetWeight": {
      "type": "function",
      "name": "resetWeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>weight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #weight}."
          }
        ]
      }
    },
    "getLetterSpacing": {
      "type": "function",
      "name": "getLetterSpacing",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>letterSpacing</code>.\n\nFor further details take a look at the property definition: {@link #letterSpacing}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for letterSpacing"
          }
        ]
      }
    },
    "setLetterSpacing": {
      "type": "function",
      "name": "setLetterSpacing",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>letterSpacing</code>.\n\nFor further details take a look at the property definition: {@link #letterSpacing}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for letterSpacing"
          }
        ]
      }
    },
    "resetLetterSpacing": {
      "type": "function",
      "name": "resetLetterSpacing",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>letterSpacing</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #letterSpacing}."
          }
        ]
      }
    }
  },
  "descendants": [
    "qx.bom.webfonts.WebFont"
  ]
}
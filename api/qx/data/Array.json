{
  "className": "qx.data.Array",
  "packageName": "qx.data",
  "name": "Array",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.data.IListData"
  ],
  "mixins": [
    "qx.data.marshal.MEventBubbling"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0,
        "index": 1015
      },
      "end": {
        "line": 1137,
        "column": 3,
        "index": 34235
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The data array is a special array used in the data binding context of\n qooxdoo. It does not extend the native array of JavaScript but its a wrapper\n for it. All the native methods are included in the implementation and it\n also fires events if the content or the length of the array changes in\n any way. Also the <code>.length</code> property is available on the array.\n This class does not need to be disposed, unless you set the autoDisposeItems\n property to true and want the items to be disposed.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 46,
        "column": 2,
        "index": 1676
      },
      "end": {
        "line": 86,
        "column": 3,
        "index": 2856
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Creates a new instance of an array.</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "param {var} The parameter can be some types.<br/>\n   Without a parameter a new blank array will be created.<br/>\n   If there is more than one parameter is given, the parameter will be\n   added directly to the new array.<br/>\n   If the parameter is a number, a new Array with the given length will be\n   created.<br/>\n   If the parameter is a JavaScript array, a new array containing the given\n   elements will be created.",
          "paramName": "param",
          "description": " The parameter can be some types.<br/>\n   Without a parameter a new blank array will be created.<br/>\n   If there is more than one parameter is given, the parameter will be\n   added directly to the new array.<br/>\n   If the parameter is a number, a new Array with the given length will be\n   created.<br/>\n   If the parameter is a JavaScript array, a new array containing the given\n   elements will be created.",
          "type": "var"
        }
      ]
    }
  },
  "properties": {
    "autoDisposeItems": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 3240
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 3307
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag to set the dispose behavior of the array. If the property is set to\n <code>true</code>, the array will dispose its content on dispose, too.</p>"
          }
        ]
      },
      "name": "autoDisposeItems",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "events": {
    "change": {
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 4048
        },
        "end": {
          "line": 122,
          "column": 32,
          "index": 4076
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The change event which will be fired if there is a change in the array.\n The data contains a map with five key value pairs:\n <li>start: The start index of the change.</li>\n <li>end: The end index of the change.</li>\n <li>type: The type of the change as a String. This can be 'add',\n 'remove', 'order' or 'add/remove'</li>\n <li>added: The items which has been added (as a JavaScript array)</li>\n <li>removed: The items which has been removed (as a JavaScript array)</li></p>"
          }
        ]
      },
      "name": "change",
      "type": "qx.event.type.Data"
    },
    "changeLength": {
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 4194
        },
        "end": {
          "line": 128,
          "column": 38,
          "index": 4228
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The changeLength event will be fired every time the length of the\n array changes.</p>"
          }
        ]
      },
      "name": "changeLength",
      "type": "qx.event.type.Data"
    },
    "changeBubble": {
      "type": "event",
      "name": "changeBubble",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The change event which will be fired on every change in the model no\n matter what property changes. This event bubbles so the root model will\n fire a change event on every change of its children properties too.\n Note that properties are required to call\n {@link #_applyEventPropagation} on apply for changes to be tracked as\n desired. It is already taken care of that properties created with the\n {@link qx.data.marshal.Json} marshaler call this method.\n The data will contain a map with the following four keys\n   <li>value: The new value of the property</li>\n   <li>old: The old value of the property.</li>\n   <li>name: The name of the property changed including its parent\n     properties separated by dots.</li>\n   <li>item: The item which has the changed property.</li>\n Due to that, the <code>getOldData</code> method will always return null\n because the old data is contained in the map.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__array": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 4275
        },
        "end": {
          "line": 133,
          "column": 17,
          "index": 4288
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "private"
    },
    "concat": {
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 4613
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 4865
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Concatenates the current and the given array into a new one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {qx.data.Array|Array} The javaScript array which should be concatenated\n   to the current array.",
            "paramName": "array",
            "description": " The javaScript array which should be concatenated\n   to the current array.",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array containing the values of both former\n   arrays.",
            "type": "qx.data.Array",
            "description": " A new array containing the values of both former\n   arrays."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "join": {
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 5162
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 5228
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the array as a string using the given connector string to\n connect the values.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "connector {String} the string which should be used to past in\n  between of the array values.",
            "paramName": "connector",
            "description": " the string which should be used to past in\n  between of the array values.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The array as a string.",
            "type": "String",
            "description": " The array as a string."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "pop": {
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 5406
        },
        "end": {
          "line": 200,
          "column": 5,
          "index": 6025
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes and returns the last element of the array.\n An change event will be fired.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The last element of the array.",
            "type": "var",
            "description": " The last element of the array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "push": {
      "location": {
        "start": {
          "line": 210,
          "column": 4,
          "index": 6303
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7118
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an element at the end of the array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} Multiple elements. Every element will be added to\n   the end of the array. An change event will be fired.",
            "paramName": "varargs",
            "description": " Multiple elements. Every element will be added to\n   the end of the array. An change event will be fired.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The new length of the array.",
            "type": "Number",
            "description": " The new length of the array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reverse": {
      "location": {
        "start": {
          "line": 245,
          "column": 4,
          "index": 7212
        },
        "end": {
          "line": 276,
          "column": 5,
          "index": 7861
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reverses the order of the array. An change event will be fired.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "shift": {
      "location": {
        "start": {
          "line": 284,
          "column": 4,
          "index": 8038
        },
        "end": {
          "line": 320,
          "column": 5,
          "index": 8889
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the first element of the array and returns it. An change event\n will be fired.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the former first element.",
            "type": "var",
            "description": " the former first element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slice": {
      "location": {
        "start": {
          "line": 332,
          "column": 4,
          "index": 9323
        },
        "end": {
          "line": 334,
          "column": 5,
          "index": 9408
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new array based on the range specified by the parameters.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {Number} The start index.",
            "paramName": "from",
            "description": " The start index.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "to {Number?null} The zero-based end index. <code>slice</code> extracts\n   up to but not including <code>to</code>. If omitted, slice extracts to the\n   end of the array.",
            "paramName": "to",
            "description": " The zero-based end index. <code>slice</code> extracts\n   up to but not including <code>to</code>. If omitted, slice extracts to the\n   end of the array.",
            "optional": true,
            "defaultValue": "null",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array containing the given range of values.",
            "type": "qx.data.Array",
            "description": " A new array containing the given range of values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "splice": {
      "location": {
        "start": {
          "line": 349,
          "column": 4,
          "index": 10068
        },
        "end": {
          "line": 443,
          "column": 5,
          "index": 13012
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method to remove and add new elements to the array. A change event\n will be fired for every removal or addition unless the array is\n identical before and after splicing.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startIndex {Integer} The index where the splice should start",
            "paramName": "startIndex",
            "description": " The index where the splice should start",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "amount {Integer} Defines number of elements which will be removed\n   at the given position.",
            "paramName": "amount",
            "description": " Defines number of elements which will be removed\n   at the given position.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {var} All following parameters will be added at the given\n   position to the array.",
            "paramName": "varargs",
            "description": " All following parameters will be added at the given\n   position to the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} An data array containing the removed elements.\n   Keep in to dispose this one, even if you don't use it!",
            "type": "qx.data.Array",
            "description": " An data array containing the removed elements.\n   Keep in to dispose this one, even if you don't use it!"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "replace": {
      "location": {
        "start": {
          "line": 452,
          "column": 4,
          "index": 13321
        },
        "end": {
          "line": 462,
          "column": 5,
          "index": 13589
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Efficiently replaces the array with the contents of src; this will suppress the\n change event if the array contents are the same, and will make sure that only\n one change event is fired</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "src {qx.data.Array|Array} the new value to set the array to",
            "paramName": "src",
            "description": " the new value to set the array to",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sort": {
      "location": {
        "start": {
          "line": 472,
          "column": 4,
          "index": 13931
        },
        "end": {
          "line": 508,
          "column": 5,
          "index": 14761
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sorts the array. If a function is given, this will be used to\n compare the items. <code>changeBubble</code> event will only be fired,\n if sorting result differs from original array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} A compare function comparing two parameters and\n   should return a number.",
            "paramName": "func",
            "description": " A compare function comparing two parameters and\n   should return a number.",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unshift": {
      "location": {
        "start": {
          "line": 517,
          "column": 4,
          "index": 15041
        },
        "end": {
          "line": 547,
          "column": 5,
          "index": 15828
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the given items to the beginning of the array. For every element,\n a change event will be fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} As many elements as you want to add to the beginning.",
            "paramName": "varargs",
            "description": " As many elements as you want to add to the beginning.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The new length of the array",
            "type": "Integer",
            "description": " The new length of the array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toArray": {
      "location": {
        "start": {
          "line": 557,
          "column": 4,
          "index": 16158
        },
        "end": {
          "line": 559,
          "column": 5,
          "index": 16202
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list data as native array. Beware of the fact that the\n internal representation will be returned and any manipulation of that\n can cause a misbehavior of the array. This method should only be used for\n debugging purposes.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The native array.",
            "type": "qx.data.Array",
            "description": " The native array."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "getItem": {
      "location": {
        "start": {
          "line": 569,
          "column": 4,
          "index": 16471
        },
        "end": {
          "line": 571,
          "column": 5,
          "index": 16527
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replacement function for the getting of the array value.\n array[0] should be array.getItem(0).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index requested of the array element.",
            "paramName": "index",
            "description": " The index requested of the array element.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The element at the given index.",
            "type": "var",
            "description": " The element at the given index."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "setItem": {
      "location": {
        "start": {
          "line": 582,
          "column": 4,
          "index": 16909
        },
        "end": {
          "line": 617,
          "column": 5,
          "index": 17790
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replacement function for the setting of an array value.\n array[0] = \"a\" should be array.setItem(0, \"a\").\n A change event will be fired if the value changes. Setting the same\n value again will not lead to a change event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index of the array element.",
            "paramName": "index",
            "description": " The index of the array element.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "item {var} The new item to set.",
            "paramName": "item",
            "description": " The new item to set.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "getLength": {
      "location": {
        "start": {
          "line": 625,
          "column": 4,
          "index": 17966
        },
        "end": {
          "line": 627,
          "column": 5,
          "index": 18011
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method returns the current length stored under .length on each\n array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The current length of the array.",
            "type": "Number",
            "description": " The current length of the array."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "indexOf": {
      "location": {
        "start": {
          "line": 636,
          "column": 4,
          "index": 18279
        },
        "end": {
          "line": 638,
          "column": 5,
          "index": 18341
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index of the item in the array. If the item is not in the\n array, -1 will be returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item of which the index should be returned.",
            "paramName": "item",
            "description": " The item of which the index should be returned.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The Index of the given item.",
            "type": "Number",
            "description": " The Index of the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "lastIndexOf": {
      "location": {
        "start": {
          "line": 647,
          "column": 4,
          "index": 18614
        },
        "end": {
          "line": 649,
          "column": 5,
          "index": 18684
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the last index of the item in the array. If the item is not in the\n array, -1 will be returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item of which the index should be returned.",
            "paramName": "item",
            "description": " The item of which the index should be returned.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The Index of the given item.",
            "type": "Number",
            "description": " The Index of the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 675,
          "column": 4,
          "index": 19437
        },
        "end": {
          "line": 677,
          "column": 5,
          "index": 19493
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if the given item is in the current array.</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use the include method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item which is possibly in the array.",
            "paramName": "item",
            "description": " The item which is possibly in the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the array contains the given item.",
            "type": "Boolean",
            "description": " true, if the array contains the given item."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "includes": {
      "location": {
        "start": {
          "line": 685,
          "column": 4,
          "index": 19714
        },
        "end": {
          "line": 687,
          "column": 5,
          "index": 19784
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if the given item is in the current array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item which is possibly in the array.",
            "paramName": "item",
            "description": " The item which is possibly in the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the array contains the given item.",
            "type": "Boolean",
            "description": " true, if the array contains the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "copy": {
      "location": {
        "start": {
          "line": 694,
          "column": 4,
          "index": 19896
        },
        "end": {
          "line": 696,
          "column": 5,
          "index": 19938
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a copy of the given arr</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} copy of this",
            "type": "qx.data.Array",
            "description": " copy of this"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAt": {
      "location": {
        "start": {
          "line": 704,
          "column": 4,
          "index": 20127
        },
        "end": {
          "line": 706,
          "column": 5,
          "index": 20201
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element at a given position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Position where to insert the item.",
            "paramName": "index",
            "description": " Position where to insert the item.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "item {var} The element to insert.",
            "paramName": "item",
            "description": " The element to insert.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertBefore": {
      "location": {
        "start": {
          "line": 714,
          "column": 4,
          "index": 20398
        },
        "end": {
          "line": 722,
          "column": 5,
          "index": 20593
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an item into the array before a given item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "before {var} Insert item before this object.",
            "paramName": "before",
            "description": " Insert item before this object.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "item {var} The item to be inserted.",
            "paramName": "item",
            "description": " The item to be inserted.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAfter": {
      "location": {
        "start": {
          "line": 730,
          "column": 4,
          "index": 20788
        },
        "end": {
          "line": 738,
          "column": 5,
          "index": 21012
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element into the array after a given item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "after {var} Insert item after this object.",
            "paramName": "after",
            "description": " Insert item after this object.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "item {var} Object to be inserted.",
            "paramName": "item",
            "description": " Object to be inserted.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAt": {
      "location": {
        "start": {
          "line": 746,
          "column": 4,
          "index": 21204
        },
        "end": {
          "line": 751,
          "column": 5,
          "index": 21363
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an element from the array at the given index.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to be removed.",
            "paramName": "index",
            "description": " Index of the item to be removed.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed item.",
            "type": "var",
            "description": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAll": {
      "location": {
        "start": {
          "line": 758,
          "column": 4,
          "index": 21507
        },
        "end": {
          "line": 800,
          "column": 5,
          "index": 22445
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all elements from the array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} A native array containing the removed elements.",
            "type": "qx.data.Array",
            "description": " A native array containing the removed elements."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "append": {
      "location": {
        "start": {
          "line": 809,
          "column": 4,
          "index": 22670
        },
        "end": {
          "line": 855,
          "column": 5,
          "index": 23910
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Append the items of the given array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {Array|qx.data.IListData} The items of this array will\n be appended.",
            "paramName": "array",
            "description": " The items of this array will\n be appended.",
            "type": [
              "Array",
              "qx.data.IListData"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the argument is not an array.",
            "type": "Error",
            "description": " if the argument is not an array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exclude": {
      "location": {
        "start": {
          "line": 862,
          "column": 4,
          "index": 24085
        },
        "end": {
          "line": 867,
          "column": 5,
          "index": 24238
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all elements which are listed in the array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {Array} the elements of this array will be excluded from this one",
            "paramName": "array",
            "description": " the elements of this array will be excluded from this one",
            "type": "qx.data.Array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 875,
          "column": 4,
          "index": 24397
        },
        "end": {
          "line": 882,
          "column": 5,
          "index": 24551
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} Item to be removed from the array.",
            "paramName": "item",
            "description": " Item to be removed from the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed item.",
            "type": "var",
            "description": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "equals": {
      "location": {
        "start": {
          "line": 891,
          "column": 4,
          "index": 24819
        },
        "end": {
          "line": 904,
          "column": 5,
          "index": 25115
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the given array has the same content as this.\n Checks only the equality of the arrays' content.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {qx.data.Array} The array to check.",
            "paramName": "array",
            "description": " The array to check.",
            "type": "qx.data.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the two arrays are equal.",
            "type": "Boolean",
            "description": " Whether the two arrays are equal."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sum": {
      "location": {
        "start": {
          "line": 912,
          "column": 4,
          "index": 25280
        },
        "end": {
          "line": 919,
          "column": 5,
          "index": 25426
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the sum of all values in the array. Supports\n numeric values only.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The sum of all values.",
            "type": "Number",
            "description": " The sum of all values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "max": {
      "location": {
        "start": {
          "line": 928,
          "column": 4,
          "index": 25648
        },
        "end": {
          "line": 938,
          "column": 5,
          "index": 25890
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the highest value in the given array.\n Supports numeric values only.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number | null} The highest of all values or undefined if the\n   array is empty.",
            "type": "Number | null",
            "description": " The highest of all values or undefined if the\n   array is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "min": {
      "location": {
        "start": {
          "line": 947,
          "column": 4,
          "index": 26104
        },
        "end": {
          "line": 957,
          "column": 5,
          "index": 26346
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the lowest value in the array. Supports\n numeric values only.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number | null} The lowest of all values or undefined\n   if the array is empty.",
            "type": "Number | null",
            "description": " The lowest of all values or undefined\n   if the array is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "forEach": {
      "location": {
        "start": {
          "line": 967,
          "column": 4,
          "index": 26716
        },
        "end": {
          "line": 971,
          "column": 5,
          "index": 26859
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Invokes the given function for every item in the array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The function which will be call for every\n   item in the array. It will be invoked with three parameters:\n   the item, the index and the array itself.",
            "paramName": "callback",
            "description": " The function which will be call for every\n   item in the array. It will be invoked with three parameters:\n   the item, the index and the array itself.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {var?} The context in which the callback will be invoked.",
            "paramName": "context",
            "description": " The context in which the callback will be invoked.",
            "optional": true,
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "filter": {
      "location": {
        "start": {
          "line": 991,
          "column": 4,
          "index": 27838
        },
        "end": {
          "line": 993,
          "column": 5,
          "index": 27937
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new array with all elements that pass the test implemented by\n the provided function. It returns a new data array instance so make sure\n to think about disposing it.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array instance containing only the items\n  which passed the test.",
            "type": "qx.data.Array",
            "description": " A new array instance containing only the items\n  which passed the test."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 1007,
          "column": 4,
          "index": 28696
        },
        "end": {
          "line": 1009,
          "column": 5,
          "index": 28789
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new array with the results of calling a provided function on every\n element in this array. It returns a new data array instance so make sure\n to think about disposing it.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The mapping function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The mapping function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array instance containing the new created items.",
            "type": "qx.data.Array",
            "description": " A new array instance containing the new created items."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "find": {
      "location": {
        "start": {
          "line": 1022,
          "column": 4,
          "index": 29428
        },
        "end": {
          "line": 1024,
          "column": 5,
          "index": 29504
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds the first matching element in the array which passes the test implemented by the\n provided function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var | undefined} The found item.",
            "type": "var | undefined",
            "description": " The found item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "some": {
      "location": {
        "start": {
          "line": 1037,
          "column": 4,
          "index": 30166
        },
        "end": {
          "line": 1039,
          "column": 5,
          "index": 30242
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether any element in the array passes the test implemented by the\n provided function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if any element passed the test function.",
            "type": "Boolean",
            "description": " <code>true</code>, if any element passed the test function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "every": {
      "location": {
        "start": {
          "line": 1052,
          "column": 4,
          "index": 30908
        },
        "end": {
          "line": 1054,
          "column": 5,
          "index": 30986
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether every element in the array passes the test implemented by the\n provided function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if every element passed the test function.",
            "type": "Boolean",
            "description": " <code>true</code>, if every element passed the test function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduce": {
      "location": {
        "start": {
          "line": 1069,
          "column": 4,
          "index": 31796
        },
        "end": {
          "line": 1071,
          "column": 5,
          "index": 31886
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply a function against an accumulator and each value of the array\n (from left-to-right) as to reduce it to a single value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The accumulator function, which will be\n   executed for every item in the array. The function will have four arguments.\n   <li><code>previousItem</code>: the previous item</li>\n   <li><code>currentItem</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The accumulator function, which will be\n   executed for every item in the array. The function will have four arguments.\n   <li><code>previousItem</code>: the previous item</li>\n   <li><code>currentItem</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initValue {var?undefined} Object to use as the first argument to the first\n   call of the callback.",
            "paramName": "initValue",
            "description": " Object to use as the first argument to the first\n   call of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The returned value of the last accumulator call.",
            "type": "var",
            "description": " The returned value of the last accumulator call."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduceRight": {
      "location": {
        "start": {
          "line": 1086,
          "column": 4,
          "index": 32696
        },
        "end": {
          "line": 1088,
          "column": 5,
          "index": 32796
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply a function against an accumulator and each value of the array\n (from right-to-left) as to reduce it to a single value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The accumulator function, which will be\n   executed for every item in the array. The function will have four arguments.\n   <li><code>previousItem</code>: the previous item</li>\n   <li><code>currentItem</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The accumulator function, which will be\n   executed for every item in the array. The function will have four arguments.\n   <li><code>previousItem</code>: the previous item</li>\n   <li><code>currentItem</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initValue {var?undefined} Object to use as the first argument to the first\n   call of the callback.",
            "paramName": "initValue",
            "description": " Object to use as the first argument to the first\n   call of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The returned value of the last accumulator call.",
            "type": "var",
            "description": " The returned value of the last accumulator call."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__updateLength": {
      "location": {
        "start": {
          "line": 1100,
          "column": 4,
          "index": 33192
        },
        "end": {
          "line": 1104,
          "column": 5,
          "index": 33358
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function which updates the length property of the array.\n Every time the length will be updated, a {@link #changeLength} data\n event will be fired.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateEventPropagation": {
      "location": {
        "start": {
          "line": 1111,
          "column": 4,
          "index": 33527
        },
        "end": {
          "line": 1115,
          "column": 5,
          "index": 33691
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to update the event propagation for a range of items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {Number} Start index.",
            "paramName": "from",
            "description": " Start index.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "to {Number} End index.",
            "paramName": "to",
            "description": " End index.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyEventPropagation": {
      "type": "function",
      "name": "_applyEventPropagation",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply function for every property created with the\n {@link qx.data.marshal.Json} marshaler. It fires and\n {@link #changeBubble} event on every change. It also adds the chaining\n listener if possible which is necessary for the bubbling of the events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      }
    },
    "_registerEventChaining": {
      "type": "function",
      "name": "_registerEventChaining",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers for the given parameters the changeBubble listener, if\n possible. It also removes the old listener, if an old item with\n a changeBubble event is given.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      }
    },
    "__changePropertyListener": {
      "type": "function",
      "name": "__changePropertyListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener responsible for formating the name and firing the change event\n for the changed property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the former properties.",
            "paramName": "name",
            "description": " The name of the former properties.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The date event fired by the property\n   change.",
            "paramName": "e",
            "description": " The date event fired by the property\n   change.",
            "type": "qx.event.type.Data"
          }
        ]
      }
    },
    "bind": {
      "type": "function",
      "name": "bind",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The bind method delegates the call to the\n {@link qx.data.SingleValueBinding#bind} function. As source, the current\n object (this) will be used.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\n   the source property.",
            "paramName": "sourcePropertyChain",
            "description": " The property chain which represents\n   the source property.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\n   be bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\n   be bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String?\"value\"} The property name of the target object,\n   defaults to \"value\".",
            "paramName": "targetProperty",
            "description": " The property name of the target object,\n   defaults to \"value\".",
            "optional": true,
            "defaultValue": "\"value\"",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map?null} A map containing the options. See\n   {@link qx.data.SingleValueBinding#bind} for more\n   information.",
            "paramName": "options",
            "description": " A map containing the options. See\n   {@link qx.data.SingleValueBinding#bind} for more\n   information.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Returns the internal id for that binding. This can be used\n   for referencing the binding e.g. for removing. This is not an atomic\n   id so you can't you use it as a hash-map index.",
            "type": "var",
            "description": " Returns the internal id for that binding. This can be used\n   for referencing the binding e.g. for removing. This is not an atomic\n   id so you can't you use it as a hash-map index."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\n   there is no property definition for object and property (source and\n   target).",
            "type": "qx.core.AssertionError",
            "description": " If the event is no data event or\n   there is no property definition for object and property (source and\n   target)."
          }
        ]
      }
    },
    "removeBinding": {
      "type": "function",
      "name": "removeBinding",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the binding with the given id from the current object. The\n id has to be the id returned by any of the bind functions.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {var} The id of the binding.",
            "paramName": "id",
            "description": " The id of the binding.",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the binding could not be found.",
            "type": "Error",
            "description": " If the binding could not be found."
          }
        ]
      }
    },
    "removeRelatedBindings": {
      "type": "function",
      "name": "removeRelatedBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all bindings between the object and the related one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "relatedObject {qx.core.Object} The object of which related\n   bindings should be removed.",
            "paramName": "relatedObject",
            "description": " The object of which related\n   bindings should be removed.",
            "type": "qx.core.Object"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\n   removed.",
            "type": "Error",
            "description": " If one of the bindings listed internally can not be\n   removed."
          }
        ]
      }
    },
    "removeAllBindings": {
      "type": "function",
      "name": "removeAllBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all bindings from the object.</p>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the object is not in the internal\n   registry of the bindings.",
            "type": "qx.core.AssertionError",
            "description": " If the object is not in the internal\n   registry of the bindings."
          },
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\n   removed.",
            "type": "Error",
            "description": " If one of the bindings listed internally can not be\n   removed."
          }
        ]
      }
    },
    "getBindings": {
      "type": "function",
      "name": "getBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array which lists all bindings for the object.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of binding informations. Every binding\n   information is an array itself containing id, sourceObject, sourceEvent,\n   targetObject and targetProperty in that order.",
            "type": "qx.data.Array",
            "description": " An array of binding informations. Every binding\n   information is an array itself containing id, sourceObject, sourceEvent,\n   targetObject and targetProperty in that order."
          }
        ]
      }
    },
    "debug": {
      "type": "function",
      "name": "debug",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs a debug message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "info": {
      "type": "function",
      "name": "info",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs an info message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "warn": {
      "type": "function",
      "name": "warn",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs a warning message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "error": {
      "type": "function",
      "name": "error",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs an error message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "trace": {
      "type": "function",
      "name": "trace",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs an error message with the current stack trace</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "__logMessage": {
      "type": "function",
      "name": "__logMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper that calls the appropriate logger function with the current object\n and any number of items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "level {String} The log level of the message",
            "paramName": "level",
            "description": " The log level of the message",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "varargs {arguments} Arguments list to be logged",
            "paramName": "varargs",
            "description": " Arguments list to be logged",
            "type": "arguments"
          }
        ]
      }
    },
    "addListener": {
      "type": "function",
      "name": "addListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add event listener to this object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method.",
            "type": "String",
            "description": " An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method."
          }
        ]
      }
    },
    "addListenerOnce": {
      "type": "function",
      "name": "addListenerOnce",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add event listener to this object, which is only called once. After the\n listener is called the event listener gets removed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object ? window} reference to the 'this' variable inside the callback",
            "paramName": "context",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method.",
            "type": "String",
            "description": " An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method."
          }
        ]
      }
    },
    "removeListener": {
      "type": "function",
      "name": "removeListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove event listener from this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} reference to the 'this' variable inside the callback",
            "paramName": "self",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to remove the event listener of\n   the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\n   the bubbling or of the capturing phase.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "description": " Whether the event was removed successfully (has existed)"
          }
        ]
      }
    },
    "removeListenerById": {
      "type": "function",
      "name": "removeListenerById",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an event listener from an event target by an id returned by\n {@link #addListener}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "description": " Whether the event was removed successfully (has existed)"
          }
        ]
      }
    },
    "hasListener": {
      "type": "function",
      "name": "hasListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if there are one or more listeners for an event type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has a listener of the given type.",
            "type": "Boolean",
            "description": " Whether the object has a listener of the given type."
          }
        ]
      }
    },
    "dispatchEvent": {
      "type": "function",
      "name": "dispatchEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatch an event on this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Event} event to dispatch",
            "paramName": "evt",
            "description": " event to dispatch",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean",
            "description": " Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "__trackPendingEvent": {
      "type": "function",
      "name": "__trackPendingEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method to track promises returned from event handlers</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{var} result the result from the event handler",
            "paramName": "result",
            "description": "the result from the event handler",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|var} the value to return",
            "type": "qx.Promise|var",
            "description": " the value to return"
          }
        ]
      }
    },
    "waitForPendingEvents": {
      "type": "function",
      "name": "waitForPendingEvents",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Waits for all pending events to be resolved</p>"
          }
        ]
      }
    },
    "fireEvent": {
      "type": "function",
      "name": "fireEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an event on this object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|qx.Promise} whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean|qx.Promise",
            "description": " whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireEventAsync": {
      "type": "function",
      "name": "fireEventAsync",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an event on this object; equivalent to fireEvent, except that it\n always returns a promise</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected",
            "type": "qx.Promise",
            "description": " a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected"
          }
        ]
      }
    },
    "fireNonBubblingEvent": {
      "type": "function",
      "name": "fireNonBubblingEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an event object and dispatch it on this object.\n The event dispatched with this method does never bubble! Use only if you\n are sure that bubbling is not required.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean",
            "description": " Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireNonBubblingEventAsync": {
      "type": "function",
      "name": "fireNonBubblingEventAsync",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an event object and dispatch it on this object; equivalent to fireNonBubblingEvent,\n except that it always returns a promise.\n The event dispatched with this method does never bubble! Use only if you\n are sure that bubbling is not required.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected",
            "type": "qx.Promise",
            "description": " a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected"
          }
        ]
      }
    },
    "fireDataEvent": {
      "type": "function",
      "name": "fireDataEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an non-bubbling data event on this object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} User defined data attached to the event object",
            "paramName": "data",
            "description": " User defined data attached to the event object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "oldData {var?null} The event's old data (optional)",
            "paramName": "oldData",
            "description": " The event's old data (optional)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|qx.Promise} whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean|qx.Promise",
            "description": " whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireDataEventAsync": {
      "type": "function",
      "name": "fireDataEventAsync",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an non-bubbling data event on this object; equivalent to\n fireEvent, except that it always returns a promise.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} User defined data attached to the event object",
            "paramName": "data",
            "description": " User defined data attached to the event object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "oldData {var?null} The event's old data (optional)",
            "paramName": "oldData",
            "description": " The event's old data (optional)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected",
            "type": "qx.Promise",
            "description": " a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected"
          }
        ]
      }
    },
    "set": {
      "type": "function",
      "name": "set",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets either multiple properties at once by using a property list or\n sets one property and its value by the first and second argument.\n As a fallback, if no generated property setter could be found, a\n handwritten setter will be searched and invoked if available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {Object | String} a map of property values. The key is the name of the property.",
            "paramName": "data",
            "description": " a map of property values. The key is the name of the property.",
            "type": [
              "Object",
              "String"
            ]
          },
          {
            "name": "@param",
            "body": "value {var?} the value, only used when <code>data</code> is a string.",
            "paramName": "value",
            "description": " the value, only used when <code>data</code> is a string.",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Returns this instance if <code>data</code> is a map\n   or a non-generated setter is called; otherwise returns <code>value</code>.",
            "type": "qx.core.Object",
            "description": " Returns this instance if <code>data</code> is a map\n   or a non-generated setter is called; otherwise returns <code>value</code>."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      }
    },
    "get": {
      "type": "function",
      "name": "get",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the value of the given property. If no generated getter could be\n found, a fallback tries to access a handwritten getter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the value",
            "type": "var",
            "description": " The value of the value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      }
    },
    "reset": {
      "type": "function",
      "name": "reset",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the value of the given property. If no generated resetter could be\n found, a handwritten resetter will be invoked, if available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      }
    },
    "isPropertyInitialized": {
      "type": "function",
      "name": "isPropertyInitialized",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the property is initialized, i.e. has a defined init value or\n has got a value by a setter method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property",
            "paramName": "prop",
            "description": " Name of the property",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the property is initialized",
            "type": "Boolean",
            "description": " If the property is initialized"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the property defined does not exist",
            "type": "Error",
            "description": " If the property defined does not exist"
          }
        ]
      }
    },
    "_applyQxOwner": {
      "type": "function",
      "name": "_applyQxOwner",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply owner</p>"
          }
        ]
      }
    },
    "_applyQxObjectId": {
      "type": "function",
      "name": "_applyQxObjectId",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply objectId</p>"
          }
        ]
      }
    },
    "__onOwnedObjectIdChange": {
      "type": "function",
      "name": "__onOwnedObjectIdChange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when a child's objectId changes</p>"
          }
        ]
      }
    },
    "_cascadeQxObjectIdChanges": {
      "type": "function",
      "name": "_cascadeQxObjectIdChanges",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reflect changes to IDs or owners</p>"
          }
        ]
      }
    },
    "getQxObject": {
      "type": "function",
      "name": "getQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the object with the specified ID</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id\n          {String} ID of the object",
            "paramName": "id",
            "description": " ID of the object",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object?} the found object",
            "type": "qx.core.Object?",
            "description": " the found object"
          }
        ]
      }
    },
    "_createQxObject": {
      "type": "function",
      "name": "_createQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the object and adds it to a list; most classes are expected to\n override <code>_createQxObjectImpl</code> NOT this method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the object",
            "paramName": "id",
            "description": " ID of the object",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object?} the created object",
            "type": "qx.core.Object?",
            "description": " the created object"
          }
        ]
      }
    },
    "_createQxObjectImpl": {
      "type": "function",
      "name": "_createQxObjectImpl",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the object, intended to be overridden. Null is a valid return\n value and will be cached by <code>getQxObject</code>, however <code>undefined</code> is NOT a\n valid value and so will not be cached meaning that <code>_createQxObjectImpl</code>\n will be called multiple times until a valid value is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the object",
            "paramName": "id",
            "description": " ID of the object",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object?} the created object",
            "type": "qx.core.Object?",
            "description": " the created object"
          }
        ]
      }
    },
    "addOwnedQxObject": {
      "type": "function",
      "name": "addOwnedQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an object as owned by this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {qx.core.Object} the object to register",
            "paramName": "obj",
            "description": " the object to register",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "id {String?} the id to set when registering the object",
            "paramName": "id",
            "description": " the id to set when registering the object",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "removeOwnedQxObject": {
      "type": "function",
      "name": "removeOwnedQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Discards an object from the list of owned objects; note that this does\n not dispose of the object, simply forgets it if it exists.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {String|Object} the ID of the object to discard, or the object itself",
            "paramName": "args",
            "description": " the ID of the object to discard, or the object itself",
            "type": [
              "String",
              "Object"
            ]
          }
        ]
      }
    },
    "__removeOwnedQxObjectImpl": {
      "type": "function",
      "name": "__removeOwnedQxObjectImpl",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an owned object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {qx.core.Object} the object",
            "paramName": "obj",
            "description": " the object",
            "type": "qx.core.Object"
          }
        ]
      }
    },
    "getOwnedQxObjects": {
      "type": "function",
      "name": "getOwnedQxObjects",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of objects that are owned by this object, or an empty\n array if none exists.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}",
            "type": "Array",
            "description": ""
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "assert": {
      "type": "function",
      "name": "assert",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the condition evaluates to <code>true</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {var} Condition to check for. Must evaluate to\n    <code>true</code>.",
            "paramName": "condition",
            "description": " Condition to check for. Must evaluate to\n    <code>true</code>.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "fail": {
      "type": "function",
      "name": "fail",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Raise an {@link AssertionError}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "compact {Boolean?false} Show less verbose message. Default: false.",
            "paramName": "compact",
            "description": " Show less verbose message. Default: false.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      }
    },
    "assertTrue": {
      "type": "function",
      "name": "assertTrue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>true</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>true</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>true</code>.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertFalse": {
      "type": "function",
      "name": "assertFalse",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>false</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>false</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>false</code>.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertEquals": {
      "type": "function",
      "name": "assertEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are equal. (Uses the equality operator\n <code>==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotEquals": {
      "type": "function",
      "name": "assertNotEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not equal. (Uses the not equality operator\n <code>!=</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertEqualsFloat": {
      "type": "function",
      "name": "assertEqualsFloat",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are equal. This might be needed because\n of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotEqualsFloat": {
      "type": "function",
      "name": "assertNotEqualsFloat",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are not equal. This might be needed\n because of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertIdentical": {
      "type": "function",
      "name": "assertIdentical",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are identical. (Uses the identity operator\n <code>===</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotIdentical": {
      "type": "function",
      "name": "assertNotIdentical",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not identical. (Uses the not identity operator\n <code>!==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotUndefined": {
      "type": "function",
      "name": "assertNotUndefined",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertUndefined": {
      "type": "function",
      "name": "assertUndefined",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotNull": {
      "type": "function",
      "name": "assertNotNull",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNull": {
      "type": "function",
      "name": "assertNull",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertJsonEquals": {
      "type": "function",
      "name": "assertJsonEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the first two arguments are equal, when serialized into\n JSON.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} The expected value",
            "paramName": "expected",
            "description": " The expected value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} The found value",
            "paramName": "found",
            "description": " The found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertMatch": {
      "type": "function",
      "name": "assertMatch",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the given string matches the regular expression</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} String, which should match the regular expression",
            "paramName": "str",
            "description": " String, which should match the regular expression",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "re {RegExp} Regular expression to match",
            "paramName": "re",
            "description": " Regular expression to match",
            "type": "RegExp"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertArgumentsCount": {
      "type": "function",
      "name": "assertArgumentsCount",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the number of arguments is within the given range</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} The <code>arguments<code> variable of a function",
            "paramName": "args",
            "description": " The <code>arguments<code> variable of a function",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "minCount {Integer} Minimal number of arguments",
            "paramName": "minCount",
            "description": " Minimal number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxCount {Integer} Maximum number of arguments",
            "paramName": "maxCount",
            "description": " Maximum number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertEventFired": {
      "type": "function",
      "name": "assertEventFired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   fires the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   fires the event.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "listener {Function?null} The function which will be invoked in the\n   listener. The function has one parameter called e which is the event.",
            "paramName": "listener",
            "description": " The function which will be invoked in the\n   listener. The function has one parameter called e which is the event.",
            "optional": true,
            "defaultValue": "null",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?\"\"} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "defaultValue": "\"\"",
            "type": "String"
          }
        ]
      }
    },
    "assertEventNotFired": {
      "type": "function",
      "name": "assertEventNotFired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is not fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   should not fire the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   should not fire the event.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertException": {
      "type": "function",
      "name": "assertException",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Asserts that the callback raises a matching exception.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} function to check",
            "paramName": "callback",
            "description": " function to check",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "exception {Error?Error} Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "paramName": "exception",
            "description": " Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "optional": true,
            "defaultValue": "Error",
            "type": "Error"
          },
          {
            "name": "@param",
            "body": "re {String|RegExp} The assertion fails if the error message does\n   not match this parameter",
            "paramName": "re",
            "description": " The assertion fails if the error message does\n   not match this parameter",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInArray": {
      "type": "function",
      "name": "assertInArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an item in the given array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of valid values",
            "paramName": "array",
            "description": " List of valid values",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotInArray": {
      "type": "function",
      "name": "assertNotInArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is NOT an item in the given array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of values",
            "paramName": "array",
            "description": " List of values",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertArrayEquals": {
      "type": "function",
      "name": "assertArrayEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both array have identical array items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Array} The expected array",
            "paramName": "expected",
            "description": " The expected array",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "found {Array} The found array",
            "paramName": "found",
            "description": " The found array",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertKeyInMap": {
      "type": "function",
      "name": "assertKeyInMap",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a key in the given map.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "map {Map} Map, where the keys represent the valid values",
            "paramName": "map",
            "description": " Map, where the keys represent the valid values",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertFunction": {
      "type": "function",
      "name": "assertFunction",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertString": {
      "type": "function",
      "name": "assertString",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertBoolean": {
      "type": "function",
      "name": "assertBoolean",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a boolean.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNumber": {
      "type": "function",
      "name": "assertNumber",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertPositiveNumber": {
      "type": "function",
      "name": "assertPositiveNumber",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInteger": {
      "type": "function",
      "name": "assertInteger",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertPositiveInteger": {
      "type": "function",
      "name": "assertPositiveInteger",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInRange": {
      "type": "function",
      "name": "assertInRange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is inside the given range.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "min {Number} lower bound",
            "paramName": "min",
            "description": " lower bound",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "max {Number} upper bound",
            "paramName": "max",
            "description": " upper bound",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertObject": {
      "type": "function",
      "name": "assertObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertArray": {
      "type": "function",
      "name": "assertArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertMap": {
      "type": "function",
      "name": "assertMap",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a map either created using <code>new Object</code>\n or by using the object literal notation <code>{ ... }</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertRegExp": {
      "type": "function",
      "name": "assertRegExp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a regular expression.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertType": {
      "type": "function",
      "name": "assertType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value has the given type using the <code>typeof</code>\n operator. Because the type is not always what it is supposed to be it is\n better to use more explicit checks like {@link #assertString} or\n {@link #assertArray}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} expected type of the value",
            "paramName": "type",
            "description": " expected type of the value",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInstance": {
      "type": "function",
      "name": "assertInstance",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of the given class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "clazz {Class} The value must be an instance of this class",
            "paramName": "clazz",
            "description": " The value must be an instance of this class",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInterface": {
      "type": "function",
      "name": "assertInterface",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value implements the given interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "iface {Class} The value must implement this interface",
            "paramName": "iface",
            "description": " The value must implement this interface",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertCssColor": {
      "type": "function",
      "name": "assertCssColor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value represents the given CSS color value. This method\n parses the color strings and compares the RGB values. It is able to\n parse values supported by {@link qx.util.ColorUtil#stringToRgb}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {String} The expected color",
            "paramName": "expected",
            "description": " The expected color",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {String} The value to check",
            "paramName": "value",
            "description": " The value to check",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertElement": {
      "type": "function",
      "name": "assertElement",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertQxObject": {
      "type": "function",
      "name": "assertQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.core.Object}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertQxWidget": {
      "type": "function",
      "name": "assertQxWidget",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.ui.core.Widget}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "getAutoDisposeItems": {
      "type": "function",
      "name": "getAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoDisposeItems</code>.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoDisposeItems"
          }
        ]
      }
    },
    "isAutoDisposeItems": {
      "type": "function",
      "name": "isAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoDisposeItems</code>.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoDisposeItems"
          }
        ]
      }
    },
    "setAutoDisposeItems": {
      "type": "function",
      "name": "setAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>autoDisposeItems</code>.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for autoDisposeItems"
          }
        ]
      }
    },
    "resetAutoDisposeItems": {
      "type": "function",
      "name": "resetAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>autoDisposeItems</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1124,
        "column": 2,
        "index": 33890
      },
      "end": {
        "line": 1136,
        "column": 3,
        "index": 34231
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}
{
  "className": "qx.bom.FileReader",
  "packageName": "qx.bom",
  "name": "FileReader",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 28,
        "column": 0,
        "index": 717
      },
      "end": {
        "line": 346,
        "column": 3,
        "index": 10248
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>FileReaders allow retrieving the data from a local file, after the file\n name was selected by an &lt;input type=\"file\"&gt; element.\n NOTE: Instances of this class must be disposed of after use\n For more information see:\n http://www.w3.org/TR/FileAPI/</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 35,
        "column": 2,
        "index": 861
      },
      "end": {
        "line": 82,
        "column": 3,
        "index": 2171
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Create a new instance.</p>"
        }
      ]
    }
  },
  "events": {
    "loadstart": {
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2232
        },
        "end": {
          "line": 86,
          "column": 35,
          "index": 2263
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when progress has begun.</p>"
          }
        ]
      },
      "name": "loadstart",
      "type": "qx.event.type.Data"
    },
    "progress": {
      "location": {
        "start": {
          "line": 89,
          "column": 4,
          "index": 2348
        },
        "end": {
          "line": 89,
          "column": 34,
          "index": 2378
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired while making progress, presumably at a minimum of every 50ms</p>"
          }
        ]
      },
      "name": "progress",
      "type": "qx.event.type.Data"
    },
    "error": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2423
        },
        "end": {
          "line": 92,
          "column": 31,
          "index": 2450
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when an error occurs</p>"
          }
        ]
      },
      "name": "error",
      "type": "qx.event.type.Data"
    },
    "abort": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2657
        },
        "end": {
          "line": 99,
          "column": 31,
          "index": 2684
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when progression has failed, after the last \"progress\" has been\n dispatched, or after \"loadstart\" has been dispatched, if \"progress\" has\n not been dispatched\"</p>"
          }
        ]
      },
      "name": "abort",
      "type": "qx.event.type.Data"
    },
    "load": {
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 2739
        },
        "end": {
          "line": 102,
          "column": 30,
          "index": 2765
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when progression is successful</p>"
          }
        ]
      },
      "name": "load",
      "type": "qx.event.type.Data"
    },
    "loadend": {
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 2898
        },
        "end": {
          "line": 108,
          "column": 33,
          "index": 2927
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when progress has stopped, after any of \"error\", \"abort\", or\n \"load\" have been dispatched.</p>"
          }
        ]
      },
      "name": "loadend",
      "type": "qx.event.type.Data"
    }
  },
  "statics": {
    "getNumFiles": {
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3266
        },
        "end": {
          "line": 124,
          "column": 5,
          "index": 3339
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the number of files selected by the user, from an &lt;input\n type=\"file\"&gt; element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "inputElement {Element}\n   The Element created as a result of an &lt;input type=\"file\"&gt; tag.",
            "paramName": "inputElement",
            "description": "\n   The Element created as a result of an &lt;input type=\"file\"&gt; tag.",
            "type": "qx.bom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer}\n   The number of selected files.",
            "type": "Integer",
            "description": "\n   The number of selected files."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFile": {
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 3762
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 3838
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the native File object selected from an &lt;input type=\"file\"&gt;\n element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "inputElement {Element}\n   The Element created as a result of an &lt;input type=\"file\"&gt; tag.",
            "paramName": "inputElement",
            "description": "\n   The Element created as a result of an &lt;input type=\"file\"&gt; tag.",
            "type": "qx.bom.Element"
          },
          {
            "name": "@param",
            "body": "index {Integer}\n   The index of the selected file to return.",
            "paramName": "index",
            "description": "\n   The index of the selected file to return.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{File}\n   The File object associated with the selected file name.",
            "type": "File",
            "description": "\n   The File object associated with the selected file name."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "_fileReader": {
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 3927
        },
        "end": {
          "line": 146,
          "column": 21,
          "index": 3944
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The native FileReader object associated this instance</p>"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "readAsArrayBuffer": {
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4379
        },
        "end": {
          "line": 161,
          "column": 5,
          "index": 4464
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Begin reading from the file referenced by the specified file\n object. This is an asynchronous request. When the file is fully loaded,\n the \"load\" event will be fired.\n The data will be provided as an ArrayBuffer object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fileObj {File}\n   A File object, as obtained by calling {@link #getFile} with an\n   element of type &lt;input type=\"file\"&gt;.",
            "paramName": "fileObj",
            "description": "\n   A File object, as obtained by calling {@link #getFile} with an\n   element of type &lt;input type=\"file\"&gt;.",
            "type": "File"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "readAsBinaryString": {
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 5070
        },
        "end": {
          "line": 180,
          "column": 5,
          "index": 5157
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Begin reading from the file referenced by the specified file\n object. This is an asynchronous request. When the file is fully loaded,\n the \"load\" event will be fired.\n The data will be provided in a binary format where each byte is in the\n range [0,255].\n NOTE: On FireFox, this method works if the page was loaded via the\n file:// protocol. In Chrome, it does not.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fileObj {File}\n   A File object, as obtained by calling {@link #getFile} with an\n   element of type &lt;input type=\"file\"&gt;.",
            "paramName": "fileObj",
            "description": "\n   A File object, as obtained by calling {@link #getFile} with an\n   element of type &lt;input type=\"file\"&gt;.",
            "type": "File"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "readAsText": {
      "location": {
        "start": {
          "line": 199,
          "column": 4,
          "index": 5827
        },
        "end": {
          "line": 201,
          "column": 5,
          "index": 5918
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Begin reading from the file referenced by the specified file\n object. This is an asynchronous request. When the file is fully loaded,\n the \"load\" event will be fired.\n The data will be provided as text, in the specified encoding.\n NOTE: On FireFox, this method works if the page was loaded via the\n file:// protocol. In Chrome, it does not.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fileObj {File}\n   A File object, as obtained by calling {@link #getFile} with an\n   element of type &lt;input type=\"file\"&gt;.",
            "paramName": "fileObj",
            "description": "\n   A File object, as obtained by calling {@link #getFile} with an\n   element of type &lt;input type=\"file\"&gt;.",
            "type": "File"
          },
          {
            "name": "@param",
            "body": "encoding {String?\"UTF-8\"}\n   The encoding for the resulting string.",
            "paramName": "encoding",
            "description": "\n   The encoding for the resulting string.",
            "optional": true,
            "defaultValue": "\"UTF-8\"",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "readAsDataURL": {
      "location": {
        "start": {
          "line": 217,
          "column": 4,
          "index": 6471
        },
        "end": {
          "line": 219,
          "column": 5,
          "index": 6548
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Begin reading from the file referenced by the specified file\n object. This is an asynchronous request. When the file is fully loaded,\n the \"load\" event will be fired.\n The data is returned in DataURL format.\n NOTE: On FireFox, this method works if the page was loaded via the\n file:// protocol. In Chrome, it does not.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fileObj {File}\n   A File object, as obtained by calling {@link #getFile} with an\n   element of type &lt;input type=\"file\"&gt;.",
            "paramName": "fileObj",
            "description": "\n   A File object, as obtained by calling {@link #getFile} with an\n   element of type &lt;input type=\"file\"&gt;.",
            "type": "File"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_handleLoadStart": {
      "location": {
        "start": {
          "line": 230,
          "column": 4,
          "index": 6928
        },
        "end": {
          "line": 232,
          "column": 5,
          "index": 7016
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>\"loadstart\" handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Object}\n   Object which contains a 'progress' object which contains the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "paramName": "e",
            "description": "\n   Object which contains a 'progress' object which contains the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleProgress": {
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 7395
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 7481
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>\"progress\" handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Object}\n   Object which contains a 'progress' object which contains the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "paramName": "e",
            "description": "\n   Object which contains a 'progress' object which contains the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleError": {
      "location": {
        "start": {
          "line": 256,
          "column": 4,
          "index": 7857
        },
        "end": {
          "line": 258,
          "column": 5,
          "index": 7937
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>\"error\" handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Object}\n   Object which contains a 'progress' object which contains the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "paramName": "e",
            "description": "\n   Object which contains a 'progress' object which contains the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleAbort": {
      "location": {
        "start": {
          "line": 269,
          "column": 4,
          "index": 8313
        },
        "end": {
          "line": 271,
          "column": 5,
          "index": 8393
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>\"abort\" handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Object}\n   Object which contains a 'progress' object which contains the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "paramName": "e",
            "description": "\n   Object which contains a 'progress' object which contains the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleLoad": {
      "location": {
        "start": {
          "line": 284,
          "column": 4,
          "index": 8855
        },
        "end": {
          "line": 290,
          "column": 5,
          "index": 9023
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>\"load\" handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Object}\n   Object which contains:\n   - A 'progress' object which contains the members:\n     - lengthComputable {Boolean} True if length is known; false otherwise\n     - loaded {Number} The number of bytes transferred so far\n     - total {Number} The length of the entire body being transferred\n   - A 'content' member which contains the loaded file content",
            "paramName": "e",
            "description": "\n   Object which contains:\n   - A 'progress' object which contains the members:\n     - lengthComputable {Boolean} True if length is known; false otherwise\n     - loaded {Number} The number of bytes transferred so far\n     - total {Number} The length of the entire body being transferred\n   - A 'content' member which contains the loaded file content",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleLoadEnd": {
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 9402
        },
        "end": {
          "line": 303,
          "column": 5,
          "index": 9486
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>\"loadend\" handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Object}\n   Object which contains a 'progress' object which contains  the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "paramName": "e",
            "description": "\n   Object which contains a 'progress' object which contains  the members:\n   - lengthComputable {Boolean} True if length is known; false otherwise\n   - loaded {Number} The number of bytes transferred so far\n   - total {Number} The length of the entire body being transferred",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 306,
        "column": 2,
        "index": 9495
      },
      "end": {
        "line": 345,
        "column": 3,
        "index": 10244
      }
    }
  },
  "descendants": []
}
{
  "className": "qx.Promise",
  "packageName": "qx",
  "name": "Promise",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 69,
        "column": 0,
        "index": 2191
      },
      "end": {
        "line": 1063,
        "column": 3,
        "index": 40673
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This class adds Promise/A+ support to Qooxdoo, as specified at\n https://github.com/promises-aplus/promises-spec and using the Bluebird Promise\n library (http://bluebirdjs.com/) to implement it.  The official Promise/A+ API)\n is mirrored exactly, and a number of extension methods are added with the BluebirdJS\n API for inspiration (many/most of the extension functions are taken verbatim).\n There are two ways to bind a 'this' value to callbacks - the first is to\n append a context method to methods like then(), and the second is to specify\n the context as the second parameter to the constructor and all callbacks will\n be bound to that value.\n For example:\n </p>\n<pre class=\"javascript\">\n   var promise = new qx.Promise(myAsyncFunction, this);\n   promise.then(function() {\n\n   });\n\n   var promise = new qx.Promise(myAsyncFunction);\n   promise.then(function() {\n\n   }, this);\n </pre>\n<p>If you have an existing qx.Promise and want to bind all callbacks, use the\n bind() method - but note that it returns a new promise:\n  </p>\n<pre class=\"javascript\">\n    var promise = someMethodThatReturnsAPromise();\n    var boundPromise = promise.bind(this);\n    boundPromise.then(function() {\n\n    }, this);\n  </pre>"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "process.*"
        },
        {
          "name": "@ignore",
          "body": "global.*"
        },
        {
          "name": "@ignore",
          "body": "Symbol.*"
        },
        {
          "name": "@ignore",
          "body": "chrome.*"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 83,
        "column": 2,
        "index": 2770
      },
      "end": {
        "line": 120,
        "column": 3,
        "index": 4052
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Constructor.\n The promise function is called with two parameters, functions which are to be called\n when the promise is fulfilled or rejected respectively.  If you do not provide any\n parameters, the promise can be externally resolved or rejected by calling the\n <code>resolve()</code> or <code>reject()</code> methods.</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "fn {Function} the promise function called with <code>(resolve, reject)</code>",
          "paramName": "fn",
          "description": " the promise function called with <code>(resolve, reject)</code>",
          "type": "Function"
        },
        {
          "name": "@param",
          "body": "context {Object?} optional context for all callbacks",
          "paramName": "context",
          "description": " optional context for all callbacks",
          "optional": true,
          "type": "Object"
        }
      ]
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 125,
        "column": 2,
        "index": 4085
      },
      "end": {
        "line": 128,
        "column": 3,
        "index": 4155
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Destructor</p>"
        }
      ]
    }
  },
  "members": {
    "__p": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4198
        },
        "end": {
          "line": 132,
          "column": 13,
          "index": 4207
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The Promise</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__external": {
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 4275
        },
        "end": {
          "line": 135,
          "column": 20,
          "index": 4291
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stores data for completing the promise externally</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "then": {
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4885
        },
        "end": {
          "line": 155,
          "column": 5,
          "index": 4972
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a promise which is determined by the functions <code>onFulfilled</code>\n and <code>onRejected</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "onFulfilled {Function} called when the Promise is fulfilled. This function\n  has one argument, the fulfillment value.",
            "paramName": "onFulfilled",
            "description": " called when the Promise is fulfilled. This function\n  has one argument, the fulfillment value.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "onRejected {Function?} called when the Promise is rejected. This function\n  has one argument, the rejection reason.",
            "paramName": "onRejected",
            "description": " called when the Promise is rejected. This function\n  has one argument, the rejection reason.",
            "optional": true,
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "catch": {
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 5540
        },
        "end": {
          "line": 169,
          "column": 5,
          "index": 5616
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Appends a rejection handler callback to the promise, and returns a new promise\n resolving to the return value of the callback if it is called, or to its original\n fulfillment value if the promise is instead fulfilled.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "onRejected {Function?} called when the Promise is rejected. This function\n  has one argument, the rejection reason.",
            "paramName": "onRejected",
            "description": " called when the Promise is rejected. This function\n  has one argument, the rejection reason.",
            "optional": true,
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a qx.Promise is rejected if onRejected throws an error or\n  returns a Promise which is itself rejected; otherwise, it is resolved.",
            "type": "qx.Promise",
            "description": " a qx.Promise is rejected if onRejected throws an error or\n  returns a Promise which is itself rejected; otherwise, it is resolved."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "bind": {
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 5980
        },
        "end": {
          "line": 185,
          "column": 5,
          "index": 6057
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new qx.Promise with the 'this' set to a different context</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "context {Object} the 'this' context for the new Promise",
            "paramName": "context",
            "description": " the 'this' context for the new Promise",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} the new promise",
            "type": "qx.Promise",
            "description": " the new promise"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.data.MBinding"
      ]
    },
    "spread": {
      "location": {
        "start": {
          "line": 209,
          "column": 4,
          "index": 6746
        },
        "end": {
          "line": 211,
          "column": 5,
          "index": 6830
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Like calling <code>.then</code>, but the fulfillment value must be an array, which is flattened\n to the formal parameters of the fulfillment handler.\n For example:\n </p>\n<pre>\n qx.Promise.all([\n   fs.readFileAsync(\"file1.txt\"),\n   fs.readFileAsync(\"file2.txt\")\n ]).spread(function(file1text, file2text) {\n   if (file1text === file2text) {\n     console.log(\"files are equal\");\n   }\n   else {\n     console.log(\"files are not equal\");\n   }\n });\n </pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fulfilledHandler {Function} called when the Promises are fulfilled.",
            "paramName": "fulfilledHandler",
            "description": " called when the Promises are fulfilled.",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "finally": {
      "location": {
        "start": {
          "line": 221,
          "column": 4,
          "index": 7225
        },
        "end": {
          "line": 223,
          "column": 5,
          "index": 7305
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Appends a handler that will be called regardless of this promise's fate. The handler\n is not allowed to modify the value of the promise</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "handler {Function?} called when the Promise is fulfilled or rejected. This function\n  has no arguments, but can return a promise",
            "paramName": "handler",
            "description": " called when the Promise is fulfilled or rejected. This function\n  has no arguments, but can return a promise",
            "optional": true,
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a qx.Promise chained from this promise",
            "type": "qx.Promise",
            "description": " a qx.Promise chained from this promise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "cancel": {
      "location": {
        "start": {
          "line": 228,
          "column": 4,
          "index": 7413
        },
        "end": {
          "line": 230,
          "column": 5,
          "index": 7481
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Cancel this promise. Will not do anything if this promise is already settled.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "all": {
      "location": {
        "start": {
          "line": 240,
          "column": 4,
          "index": 7897
        },
        "end": {
          "line": 242,
          "column": 5,
          "index": 7967
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Same as {@link qx.Promise.all} except that it iterates over the value of this promise, when\n it is fulfilled; for example, if this Promise resolves to an Iterable (eg an Array),\n <code>.all</code> will return a Promise that waits for all promises in that Iterable to be\n fullfilled.  The Iterable can be a mix of values and Promises</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "race": {
      "location": {
        "start": {
          "line": 252,
          "column": 4,
          "index": 8395
        },
        "end": {
          "line": 254,
          "column": 5,
          "index": 8475
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Same as {@link qx.Promise.race} except that it iterates over the value of this promise, when\n it is fulfilled; for example, if this Promise resolves to an Iterable (eg an Array),\n <code>.race</code> will return a Promise that waits until the first promise in that Iterable\n has been fullfilled.  The Iterable can be a mix of values and Promises</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "any": {
      "location": {
        "start": {
          "line": 263,
          "column": 4,
          "index": 8807
        },
        "end": {
          "line": 265,
          "column": 5,
          "index": 8885
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Same as {@link qx.Promise.some} except that it iterates over the value of this promise, when\n it is fulfilled.  Like <code>some</code>, with 1 as count. However, if the promise fulfills,\n the fulfillment value is not an array of 1 but the value directly.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "some": {
      "location": {
        "start": {
          "line": 276,
          "column": 4,
          "index": 9350
        },
        "end": {
          "line": 278,
          "column": 5,
          "index": 9437
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Same as {@link qx.Promise.some} except that it iterates over the value of this promise, when\n it is fulfilled; return a promise that is fulfilled as soon as count promises are fulfilled\n in the array. The fulfillment value is an array with count values in the order they were fulfilled.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "count {Integer}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "forEach": {
      "location": {
        "start": {
          "line": 294,
          "column": 4,
          "index": 10328
        },
        "end": {
          "line": 296,
          "column": 5,
          "index": 10421
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Same as {@link qx.Promise.forEach} except that it iterates over the value of this promise, when\n it is fulfilled; iterates over the values with the given <code>iterator</code> function with the signature\n <code>(value, index, length)</code> where <code>value</code> is the resolved value. Iteration happens\n serially. If any promise is rejected the returned promise is rejected as well.\n Resolves to the original array unmodified, this method is meant to be used for side effects. If the iterator\n function returns a promise or a thenable, then the result of the promise is awaited, before continuing with\n next iteration.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "filter": {
      "location": {
        "start": {
          "line": 308,
          "column": 4,
          "index": 11025
        },
        "end": {
          "line": 310,
          "column": 5,
          "index": 11128
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Same as {@link qx.Promise.filter} except that it iterates over the value of this promise, when it is fulfilled;\n iterates over all the values into an array and filter the array to another using the given filterer function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Object?} options; can be:\n  <code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "paramName": "options",
            "description": " options; can be:\n  <code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 331,
          "column": 4,
          "index": 12367
        },
        "end": {
          "line": 333,
          "column": 5,
          "index": 12464
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Same as {@link qx.Promise.map} except that it iterates over the value of this promise, when it is fulfilled;\n iterates over all the values into an array and map the array to another using the given mapper function.\n Promises returned by the mapper function are awaited for and the returned promise doesn't fulfill\n until all mapped promises have fulfilled as well. If any promise in the array is rejected, or\n any promise returned by the mapper function is rejected, the returned promise is rejected as well.\n The mapper function for a given item is called as soon as possible, that is, when the promise\n for that item's index in the input array is fulfilled. This doesn't mean that the result array\n has items in random order, it means that .map can be used for concurrency coordination unlike\n .all.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Object?} options; can be:\n  <code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "paramName": "options",
            "description": " options; can be:\n  <code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "mapSeries": {
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 13493
        },
        "end": {
          "line": 354,
          "column": 5,
          "index": 13593
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Same as {@link qx.Promise.mapSeries} except that it iterates over the value of this promise, when\n it is fulfilled; iterates over all the values into an array and iterate over the array serially,\n in-order.\n Returns a promise for an array that contains the values returned by the iterator function in their\n respective positions. The iterator won't be called for an item until its previous item, and the\n promise returned by the iterator for that item are fulfilled. This results in a mapSeries kind of\n utility but it can also be used simply as a side effect iterator similar to Array#forEach.\n If any promise in the input array is rejected or any promise returned by the iterator function is\n rejected, the result will be rejected as well.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduce": {
      "location": {
        "start": {
          "line": 378,
          "column": 4,
          "index": 14983
        },
        "end": {
          "line": 380,
          "column": 5,
          "index": 15090
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Same as {@link qx.Promise.reduce} except that it iterates over the value of this promise, when\n it is fulfilled; iterates over all the values in the <code>Iterable</code> into an array and\n reduce the array to a value using the given reducer function.\n If the reducer function returns a promise, then the result of the promise is awaited, before\n continuing with next iteration. If any promise in the array is rejected or a promise returned\n by the reducer function is rejected, the result is rejected as well.\n If initialValue is undefined (or a promise that resolves to undefined) and the iterable contains\n only 1 item, the callback will not be called and the iterable's single item is returned. If the\n iterable is empty, the callback will not be called and initialValue is returned (which may be\n undefined).\n qx.Promise.reduce will start calling the reducer as soon as possible, this is why you might want to\n use it over qx.Promise.all (which awaits for the entire array before you can call Array#reduce on it).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "reducer {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "reducer",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initialValue {Object?} optional initial value",
            "paramName": "initialValue",
            "description": " optional initial value",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__externalPromise": {
      "location": {
        "start": {
          "line": 385,
          "column": 4,
          "index": 15145
        },
        "end": {
          "line": 387,
          "column": 5,
          "index": 15266
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>External promise handler</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getPendingExternal": {
      "location": {
        "start": {
          "line": 392,
          "column": 4,
          "index": 15377
        },
        "end": {
          "line": 401,
          "column": 5,
          "index": 15700
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the data stored by __externalPromise, throws an exception once processed</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "resolve": {
      "location": {
        "start": {
          "line": 406,
          "column": 4,
          "index": 15759
        },
        "end": {
          "line": 408,
          "column": 5,
          "index": 15831
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resolves an external promise</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reject": {
      "location": {
        "start": {
          "line": 413,
          "column": 4,
          "index": 15889
        },
        "end": {
          "line": 415,
          "column": 5,
          "index": 15961
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Rejects an external promise</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_callIterableMethod": {
      "location": {
        "start": {
          "line": 426,
          "column": 4,
          "index": 16197
        },
        "end": {
          "line": 437,
          "column": 5,
          "index": 16582
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method used to call Promise methods which iterate over an array</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_callMethod": {
      "location": {
        "start": {
          "line": 442,
          "column": 4,
          "index": 16656
        },
        "end": {
          "line": 445,
          "column": 5,
          "index": 16811
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method used to call a Promise method</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "toPromise": {
      "location": {
        "start": {
          "line": 457,
          "column": 4,
          "index": 17306
        },
        "end": {
          "line": 459,
          "column": 5,
          "index": 17348
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the actual Promise implementation.\n Note that Bluebird is the current implementation, and may change without\n notice in the future; if you use this API you accept that this is a private\n implementation detail exposed for debugging or diagnosis purposes only.  For\n this reason, the toPromise() method is listed as deprecated starting from the\n first release</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} this API method is subject to change"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "statics": {
    "Bluebird": {
      "location": {
        "start": {
          "line": 464,
          "column": 4,
          "index": 17426
        },
        "end": {
          "line": 464,
          "column": 18,
          "index": 17440
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Bluebird Promise library; always available</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "Native": {
      "location": {
        "start": {
          "line": 467,
          "column": 4,
          "index": 17524
        },
        "end": {
          "line": 467,
          "column": 16,
          "index": 17536
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native Promise library; only available if the browser supports it</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "Promise": {
      "location": {
        "start": {
          "line": 470,
          "column": 4,
          "index": 17644
        },
        "end": {
          "line": 470,
          "column": 17,
          "index": 17657
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Promise library, either the Native one or a Polyfill; reliable choice for native Promises</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "__DEFAULT_ERROR": {
      "location": {
        "start": {
          "line": 475,
          "column": 4,
          "index": 17800
        },
        "end": {
          "line": 475,
          "column": 47,
          "index": 17843
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This is used to suppress warnings about rejections without an Error object, only used if\n the reason is undefined</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "isPromise": {
      "location": {
        "start": {
          "line": 499,
          "column": 4,
          "index": 18812
        },
        "end": {
          "line": 515,
          "column": 5,
          "index": 19297
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the value is a promise.\n Note that this is not an <code>instanceof</code> check and while it may look odd to just test whether\n there is a property called <code>then</code> which is a Function, that's the actual spec -</p>"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "https://promisesaplus.com/\n The difficulty is that it also needs to have a <code>.finally</code> and <code>.catch</code> methods in order to\n always be routinely useful; it's debatable what we can do about that here - if the calling code\n definitely requires a promise then it can use <code>.resolve</code> to upgrade it or make sure that it is\n a fully featured promise.  In this function, we detect that it is thenable, and then give a warning\n if it is not catchable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{*} value"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if it is a promise",
            "type": "Boolean",
            "description": " true if it is a promise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resolve": {
      "location": {
        "start": {
          "line": 528,
          "column": 4,
          "index": 19898
        },
        "end": {
          "line": 539,
          "column": 5,
          "index": 20216
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a Promise object that is resolved with the given value. If the value is a thenable (i.e.\n has a then method), the returned promise will \"follow\" that thenable, adopting its eventual\n state; otherwise the returned promise will be fulfilled with the value. Generally, if you\n don't know if a value is a promise or not, Promise.resolve(value) it instead and work with\n the return value as a promise.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object}"
          },
          {
            "name": "@param",
            "body": "context {Object?} optional context for callbacks to be bound to",
            "paramName": "context",
            "description": " optional context for callbacks to be bound to",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reject": {
      "location": {
        "start": {
          "line": 547,
          "column": 4,
          "index": 20569
        },
        "end": {
          "line": 560,
          "column": 5,
          "index": 21068
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a Promise object that is rejected with the given reason.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "reason {Object?} Reason why this Promise rejected. A warning is generated if not instanceof Error. If undefined, a default Error is used.",
            "paramName": "reason",
            "description": " Reason why this Promise rejected. A warning is generated if not instanceof Error. If undefined, a default Error is used.",
            "optional": true,
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "context {Object?} optional context for callbacks to be bound to",
            "paramName": "context",
            "description": " optional context for callbacks to be bound to",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "allOf": {
      "location": {
        "start": {
          "line": 570,
          "column": 4,
          "index": 21476
        },
        "end": {
          "line": 588,
          "column": 5,
          "index": 22056
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a promise that resolves when all of the promises in the object properties have resolved,\n or rejects with the reason of the first passed promise that rejects.  The result of each property\n is placed back in the object, replacing the promise.  Note that non-promise values are untouched.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} An object",
            "paramName": "value",
            "description": " An object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "all": {
      "location": {
        "start": {
          "line": 598,
          "column": 4,
          "index": 22417
        },
        "end": {
          "line": 600,
          "column": 5,
          "index": 22500
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a promise that resolves when all of the promises in the iterable argument have resolved,\n or rejects with the reason of the first passed promise that rejects.  Note that non-promise values\n are untouched.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "race": {
      "location": {
        "start": {
          "line": 608,
          "column": 4,
          "index": 22791
        },
        "end": {
          "line": 610,
          "column": 5,
          "index": 22876
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves\n or rejects, with the value or reason from that promise.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "any": {
      "location": {
        "start": {
          "line": 625,
          "column": 4,
          "index": 23297
        },
        "end": {
          "line": 627,
          "column": 5,
          "index": 23380
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Like Promise.some, with 1 as count. However, if the promise fulfills, the fulfillment value is not an\n array of 1 but the value directly.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "some": {
      "location": {
        "start": {
          "line": 639,
          "column": 4,
          "index": 23933
        },
        "end": {
          "line": 641,
          "column": 5,
          "index": 24025
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Given an Iterable (arrays are Iterable), or a promise of an Iterable, which produces promises (or a mix\n of promises and values), iterate over all the values in the Iterable into an array and return a promise\n that is fulfilled as soon as count promises are fulfilled in the array. The fulfillment value is an\n array with count values in the order they were fulfilled.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "count {Integer}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "forEach": {
      "location": {
        "start": {
          "line": 657,
          "column": 4,
          "index": 24947
        },
        "end": {
          "line": 659,
          "column": 5,
          "index": 25045
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Iterate over an array, or a promise of an array, which contains promises (or a mix of promises and values)\n with the given <code>iterator</code> function with the signature <code>(value, index, length)</code> where\n <code>value</code> is the resolved value of a respective promise in the input array. Iteration happens\n serially. If any promise in the input array is rejected the returned promise is rejected as well.\n Resolves to the original array unmodified, this method is meant to be used for side effects. If the iterator\n function returns a promise or a thenable, then the result of the promise is awaited, before continuing with\n next iteration.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "filter": {
      "location": {
        "start": {
          "line": 685,
          "column": 4,
          "index": 26190
        },
        "end": {
          "line": 687,
          "column": 5,
          "index": 26298
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Given an Iterable(arrays are Iterable), or a promise of an Iterable, which produces promises (or a mix of\n promises and values), iterate over all the values in the Iterable into an array and filter the array to\n another using the given filterer function.\n It is essentially an efficient shortcut for doing a .map and then Array#filter:\n </p>\n<pre>\n   qx.Promise.map(valuesToBeFiltered, function(value, index, length) {\n       return Promise.all([filterer(value, index, length), value]);\n   }).then(function(values) {\n       return values.filter(function(stuff) {\n           return stuff[0] == true\n       }).map(function(stuff) {\n           return stuff[1];\n       });\n   });\n </pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Object?} options; can be:\n  <code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "paramName": "options",
            "description": " options; can be:\n  <code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 730,
          "column": 4,
          "index": 28300
        },
        "end": {
          "line": 732,
          "column": 5,
          "index": 28402
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Given an <code>Iterable</code> (arrays are <code>Iterable</code>), or a promise of an\n <code>Iterable</code>, which produces promises (or a mix of promises and values), iterate over\n all the values in the <code>Iterable</code> into an array and map the array to another using\n the given mapper function.\n Promises returned by the mapper function are awaited for and the returned promise doesn't fulfill\n until all mapped promises have fulfilled as well. If any promise in the array is rejected, or\n any promise returned by the mapper function is rejected, the returned promise is rejected as well.\n The mapper function for a given item is called as soon as possible, that is, when the promise\n for that item's index in the input array is fulfilled. This doesn't mean that the result array\n has items in random order, it means that .map can be used for concurrency coordination unlike\n .all.\n A common use of Promise.map is to replace the .push+Promise.all boilerplate:\n </p>\n<pre>\n   var promises = [];\n   for (var i = 0; i < fileNames.length; ++i) {\n       promises.push(fs.readFileAsync(fileNames[i]));\n   }\n   qx.Promise.all(promises).then(function() {\n       console.log(\"done\");\n   });\n\n   qx.Promise.map(fileNames, function(fileName) {\n\n       return fs.readFileAsync(fileName);\n   }).then(function() {\n       console.log(\"done\");\n   });\n </pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Object?} options; can be:\n  <code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "paramName": "options",
            "description": " options; can be:\n  <code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "mapSeries": {
      "location": {
        "start": {
          "line": 769,
          "column": 4,
          "index": 30254
        },
        "end": {
          "line": 771,
          "column": 5,
          "index": 30359
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Given an <code>Iterable</code>(arrays are <code>Iterable</code>), or a promise of an\n <code>Iterable</code>, which produces promises (or a mix of promises and values), iterate over\n all the values in the <code>Iterable</code> into an array and iterate over the array serially,\n in-order.\n Returns a promise for an array that contains the values returned by the iterator function in their\n respective positions. The iterator won't be called for an item until its previous item, and the\n promise returned by the iterator for that item are fulfilled. This results in a mapSeries kind of\n utility but it can also be used simply as a side effect iterator similar to Array#forEach.\n If any promise in the input array is rejected or any promise returned by the iterator function is\n rejected, the result will be rejected as well.\n Example where .mapSeries(the instance method) is used for iterating with side effects:\n </p>\n<pre>\n\n function loadStory() {\n   return getJSON('story.json')\n     .then(function(story) {\n       addHtmlToPage(story.heading);\n       return story.chapterURLs.map(getJSON);\n     })\n     .mapSeries(function(chapter) { addHtmlToPage(chapter.html); })\n     .then(function() { addTextToPage(\"All done\"); })\n     .catch(function(err) { addTextToPage(\"Argh, broken: \" + err.message); })\n     .then(function() { document.querySelector('.spinner').style.display = 'none'; });\n }\n </pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduce": {
      "location": {
        "start": {
          "line": 809,
          "column": 4,
          "index": 32299
        },
        "end": {
          "line": 811,
          "column": 5,
          "index": 32411
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Given an <code>Iterable</code> (arrays are <code>Iterable</code>), or a promise of an\n <code>Iterable</code>, which produces promises (or a mix of promises and values), iterate\n over all the values in the <code>Iterable</code> into an array and reduce the array to a\n value using the given reducer function.\n If the reducer function returns a promise, then the result of the promise is awaited, before\n continuing with next iteration. If any promise in the array is rejected or a promise returned\n by the reducer function is rejected, the result is rejected as well.\n Read given files sequentially while summing their contents as an integer. Each file contains\n just the text 10.\n </p>\n<pre>\n   qx.Promise.reduce([\"file1.txt\", \"file2.txt\", \"file3.txt\"], function(total, fileName) {\n       return fs.readFileAsync(fileName, \"utf8\").then(function(contents) {\n           return total + parseInt(contents, 10);\n       });\n   }, 0).then(function(total) {\n\n   });\n </pre>\n<p>If initialValue is undefined (or a promise that resolves to undefined) and the iterable contains\n only 1 item, the callback will not be called and the iterable's single item is returned. If the\n iterable is empty, the callback will not be called and initialValue is returned (which may be\n undefined).\n Promise.reduce will start calling the reducer as soon as possible, this is why you might want to\n use it over Promise.all (which awaits for the entire array before you can call Array#reduce on it).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "reducer {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "reducer",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initialValue {Object?} optional initial value",
            "paramName": "initialValue",
            "description": " optional initial value",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "method": {
      "location": {
        "start": {
          "line": 819,
          "column": 4,
          "index": 32728
        },
        "end": {
          "line": 824,
          "column": 5,
          "index": 32904
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new function that wraps the given function fn. The new function will always return a promise that is\n fulfilled with the original functions return values or rejected with thrown exceptions from the original function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cb {Function}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function}",
            "type": "Function",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "props": {
      "location": {
        "start": {
          "line": 840,
          "column": 4,
          "index": 33741
        },
        "end": {
          "line": 842,
          "column": 5,
          "index": 33825
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Like .all but for object properties or Maps* entries instead of iterated values. Returns a promise that\n is fulfilled when all the properties of the object or the Map's' values** are fulfilled. The promise's\n fulfillment value is an object or a Map with fulfillment values at respective keys to the original object\n or a Map. If any promise in the object or Map rejects, the returned promise is rejected with the rejection\n reason.\n If object is a trusted Promise, then it will be treated as a promise for object rather than for its\n properties. All other objects (except Maps) are treated for their properties as is returned by\n Object.keys - the object's own enumerable properties.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "input {Object} An Object",
            "paramName": "input",
            "description": " An Object",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "promisify": {
      "location": {
        "start": {
          "line": 897,
          "column": 4,
          "index": 35679
        },
        "end": {
          "line": 899,
          "column": 5,
          "index": 35776
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new function that wraps a function that is in node.js\n style. The resulting function returns a promise instead of taking a\n callback function as an argument. The promise is resolved or rejected\n by the action of the callback function. The provided function must\n accept a callback as its last argument, and that callback function must\n expect its first argument to be an error if non-null. If the first\n argument is null, the second argument (optional) will be the success\n value.\n Example:\n Assume there is a member method in myApp.Application such as the\n following:</p>\n <pre><code>\n   issueRpc : function(method, params, callback)\n   {\n     ...\n   }\n </code></pre>\n<p>where the signature of <code>callback</code> is:</p>\n <pre><code>\n   function callback(e, result)\n </code></pre>\n<p>The <code>issueRpc</code>method could be converted to be called using\n promises instead of callbacks, as shown here:</p>\n <pre><code>\n   var app = qx.core.Init.getApplication();\n   var rpc = qx.Promise.promisify(app.issueRpc, { context : app });\n   rpc(\"ping\", [ \"hello world\" ])\n     .then(\n       function(pongValue)\n       {\n\n       })\n     .catch(\n       function(e)\n       {\n         throw e;\n       });\n </code></pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "f {Function} The node.js-style function to be promisified",
            "paramName": "f",
            "description": " The node.js-style function to be promisified",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Map?}\n   The sole user option in this map is <code>context</code>, which may\n   be specified to arrange for the provided callback function to be\n   called in the specified context.",
            "paramName": "options",
            "description": "\n   The sole user option in this map is <code>context</code>, which may\n   be specified to arrange for the provided callback function to be\n   called in the specified context.",
            "optional": true,
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__attachBluebird": {
      "location": {
        "start": {
          "line": 911,
          "column": 4,
          "index": 36043
        },
        "end": {
          "line": 918,
          "column": 5,
          "index": 36319
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when the Bluebird Promise class is loaded</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "Promise {Class} the Promise class",
            "paramName": "Promise",
            "description": " the Promise class",
            "type": "qx.Class"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__initialized": {
      "location": {
        "start": {
          "line": 921,
          "column": 4,
          "index": 36381
        },
        "end": {
          "line": 921,
          "column": 24,
          "index": 36401
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether one-time initialisaton has happened</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__initialize": {
      "location": {
        "start": {
          "line": 926,
          "column": 4,
          "index": 36452
        },
        "end": {
          "line": 950,
          "column": 5,
          "index": 37202
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>One-time initializer</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onUnhandledRejection": {
      "location": {
        "start": {
          "line": 956,
          "column": 4,
          "index": 37345
        },
        "end": {
          "line": 975,
          "column": 5,
          "index": 37926
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles unhandled errors and passes them through to Qooxdoo's global error handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {NativeEvent}"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__wrap": {
      "location": {
        "start": {
          "line": 982,
          "column": 4,
          "index": 38058
        },
        "end": {
          "line": 991,
          "column": 5,
          "index": 38295
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Wraps values, converting Promise into qx.Promise</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Object",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__bindArgs": {
      "location": {
        "start": {
          "line": 1002,
          "column": 4,
          "index": 38814
        },
        "end": {
          "line": 1019,
          "column": 5,
          "index": 39347
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Binds all functions in the array to the context at the end of the array;\n the last value must be a qx.core.Object to distinguish itself from configuration\n objects passed to some methods.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments}"
          },
          {
            "name": "@param",
            "body": "minArgs {Integer?} minimum number of arguments expected for the method call;\n \tthis is used to determine whether the last value is for binding (default is 1)",
            "paramName": "minArgs",
            "description": " minimum number of arguments expected for the method call;\n \tthis is used to determine whether the last value is for binding (default is 1)",
            "optional": true,
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} array of new arguments with functions bound as necessary",
            "type": "Array",
            "description": " array of new arguments with functions bound as necessary"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__callStaticMethod": {
      "location": {
        "start": {
          "line": 1028,
          "column": 4,
          "index": 39605
        },
        "end": {
          "line": 1036,
          "column": 5,
          "index": 39875
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method used to call a Bluebird Promise method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "methodName {String} method name to call",
            "paramName": "methodName",
            "description": " method name to call",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Array} arguments to pass",
            "paramName": "args",
            "description": " arguments to pass",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "minArgs {Integer?} {@see __bindArgs}",
            "paramName": "minArgs",
            "description": " {@see __bindArgs}",
            "optional": true,
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object?}",
            "type": "Object?",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__mapArgs": {
      "location": {
        "start": {
          "line": 1042,
          "column": 4,
          "index": 40070
        },
        "end": {
          "line": 1054,
          "column": 5,
          "index": 40398
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Maps all arguments ready for passing to a Bluebird function; qx.data.Array are\n translated to native arrays and qx.Promise to Promise.  This is not recursive.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 1057,
        "column": 2,
        "index": 40407
      },
      "end": {
        "line": 1062,
        "column": 3,
        "index": 40669
      }
    }
  },
  "descendants": []
}